
2025-07-02 16:28:15,312 - INFO - api.api - api.py:464 - Attempting to retrieve wiki cache for niranjandasMM/LLM_agents (github), lang: en
2025-07-02 16:28:15,312 - INFO - api.api - api.py:471 - Wiki cache not found for niranjandasMM/LLM_agents (github), lang: en
2025-07-02 16:28:16,870 - INFO - api.websocket_wiki - websocket_wiki.py:79 - Request size: 1557 tokens
2025-07-02 16:28:16,894 - INFO - adalflow.core.prompt_builder - prompt_builder.py:74 - Prompt has variables: ['schema']
2025-07-02 16:28:16,895 - INFO - adalflow.core.prompt_builder - prompt_builder.py:74 - Prompt has variables: ['schema']
2025-07-02 16:28:16,895 - INFO - api.rag - rag.py:73 - Dialog turns list exists but is empty
2025-07-02 16:28:16,895 - INFO - api.rag - rag.py:87 - Returning 0 dialog turns from memory
2025-07-02 16:28:16,917 - INFO - adalflow.optim.grad_component - grad_component.py:79 - EvalFnToTextLoss: No backward engine provided. Creating one using model_client and model_kwargs.
2025-07-02 16:28:16,922 - INFO - adalflow.core.prompt_builder - prompt_builder.py:74 - Prompt has variables: ['contexts', 'system_prompt', 'conversation_history', 'output_format_str', 'input_str']
2025-07-02 16:28:16,923 - INFO - adalflow.core.generator - generator.py:180 - Generator Generator initialized.
2025-07-02 16:28:16,923 - INFO - api.data_pipeline - data_pipeline.py:705 - Preparing repo storage for https://github.com/niranjandasMM/LLM_agents/...
2025-07-02 16:28:16,923 - INFO - api.data_pipeline - data_pipeline.py:715 - Extracted repo name: niranjandasMM_LLM_agents
2025-07-02 16:28:16,923 - INFO - api.data_pipeline - data_pipeline.py:72 - Preparing to clone repository to /Users/niranjanadas_m/.adalflow/repos/niranjandasMM_LLM_agents
2025-07-02 16:28:16,989 - INFO - api.data_pipeline - data_pipeline.py:104 - Using access token for authentication
2025-07-02 16:28:16,990 - INFO - api.data_pipeline - data_pipeline.py:107 - Cloning repository from https://github.com/niranjandasMM/LLM_agents/ to /Users/niranjanadas_m/.adalflow/repos/niranjandasMM_LLM_agents
2025-07-02 16:28:18,690 - INFO - api.data_pipeline - data_pipeline.py:116 - Repository cloned successfully
2025-07-02 16:28:18,691 - INFO - api.data_pipeline - data_pipeline.py:738 - Repo paths: {'save_repo_dir': '/Users/niranjanadas_m/.adalflow/repos/niranjandasMM_LLM_agents', 'save_db_file': '/Users/niranjanadas_m/.adalflow/databases/niranjandasMM_LLM_agents.pkl'}
2025-07-02 16:28:18,691 - INFO - api.data_pipeline - data_pipeline.py:774 - Creating new database...
2025-07-02 16:28:18,692 - INFO - api.data_pipeline - data_pipeline.py:201 - Using exclusion mode
2025-07-02 16:28:18,692 - INFO - api.data_pipeline - data_pipeline.py:202 - Excluded directories: ['./env/', './docs/', './bower_components/', './jspm_packages/', './.settings/', './virtualenv/', './site-docs/', './temp/', './node_modules/', './target/', './obj/', './.vs/', './log/', './bin/', './_site/', './.hg/', './.vscode/', './logs/', './.git/', './.bzr/', './build/', './.ruff_cache/', './.venv/', './tmp/', './out/', './.eclipse/', './venv/', './__pycache__/', './.coverage/', './.pytest_cache/', './_docs/', './.svn/', './.mypy_cache/', './.idea/', './dist/']
2025-07-02 16:28:18,692 - INFO - api.data_pipeline - data_pipeline.py:203 - Excluded files: ['vite.config.js', '*.a', '*.deb', '*.msix', '*.slo', '*.exe', 'lib-cov', 'build', 'npm-shrinkwrap.json', '*.rar', '.flake8', 'bld', 'webpack.config.js', 'bower_components', '.env', 'requirements.txt.lock', '*.lib', '.gitlab-ci.yml', '*.map', '*.img', '*.ear', '*.dist-info', '*.jar', '*.tar', '.nyc_output', '*.pyo', '*.jsm', '*.appxbundle', 'jspm_packages', 'desktop.ini', '.eslintignore', '*.xap', 'jest.config.js', '*.obj', '*.eggs', 'pnpm-lock.yaml', 'poetry.lock', '*.gz', 'Pipfile.lock', '.stylelintrc', '*.dylib', 'Thumbs.db', 'Cargo.lock', 'babel.config.js', 'next.config.js', '*.egg-info', '*.rpm', 'tsconfig.json', '*.cfg', '*.env', '*.war', '*.lo', '.output', '*.pyc', '.jshintrc', '*.7z', '*.dmg', '.gitattributes', '*.msi', '*.tgz', '.env.*', 'htmlcov', '.prettierrc', 'bin', '*.zip', '*.iso', 'coverage', '*.dSYM', '.gitignore', 'node_modules', '__pycache__', '*.egg', '*.o', '*.pyd', 'packages/*/dist', 'out', '*.so', 'composer.lock', '*.dll', '*.ini', 'pyproject.toml', '*.bundle.css', '.flaskenv', 'rollup.config.js', '*.bundle.js', '.gitmodules', '.editorconfig', '*.lnk', '*.ipa', 'mypy.ini', '.lock', 'yarn.lock', 'dist', '*.min.js', '*.appx', 'packages/*/build', 'target', '.eslintrc', '.tox', '.DS_Store', '*.min.css', '.github', '*.la', '.pylintrc', 'karma.conf.js', '*.class']
2025-07-02 16:28:18,692 - INFO - api.data_pipeline - data_pipeline.py:205 - Reading documents from /Users/niranjanadas_m/.adalflow/repos/niranjandasMM_LLM_agents
2025-07-02 16:28:18,728 - INFO - api.data_pipeline - data_pipeline.py:351 - Found 4 documents
2025-07-02 16:28:18,729 - INFO - adalflow.components.data_process.text_splitter - text_splitter.py:210 - Initialized TextSplitter with split_by=word, chunk_size=350, chunk_overlap=100, batch_size=1000
2025-07-02 16:28:18,743 - INFO - adalflow.components.data_process.text_splitter - text_splitter.py:226 - Splitting text with split_by: word, chunk_size: 350, chunk_overlap: 100
2025-07-02 16:28:18,743 - INFO - adalflow.components.data_process.text_splitter - text_splitter.py:309 - Text split by ' ' into 1149 parts.
2025-07-02 16:28:18,743 - INFO - adalflow.components.data_process.text_splitter - text_splitter.py:231 - Text split into 1149 parts.
2025-07-02 16:28:18,743 - INFO - adalflow.components.data_process.text_splitter - text_splitter.py:351 - Merged into 5 chunks.
2025-07-02 16:28:18,743 - INFO - adalflow.components.data_process.text_splitter - text_splitter.py:235 - Text merged into 5 chunks.
2025-07-02 16:28:18,744 - INFO - adalflow.components.data_process.text_splitter - text_splitter.py:226 - Splitting text with split_by: word, chunk_size: 350, chunk_overlap: 100
2025-07-02 16:28:18,744 - INFO - adalflow.components.data_process.text_splitter - text_splitter.py:309 - Text split by ' ' into 2556 parts.
2025-07-02 16:28:18,744 - INFO - adalflow.components.data_process.text_splitter - text_splitter.py:231 - Text split into 2556 parts.
2025-07-02 16:28:18,745 - INFO - adalflow.components.data_process.text_splitter - text_splitter.py:351 - Merged into 10 chunks.
2025-07-02 16:28:18,745 - INFO - adalflow.components.data_process.text_splitter - text_splitter.py:235 - Text merged into 10 chunks.
2025-07-02 16:28:18,747 - INFO - adalflow.components.data_process.text_splitter - text_splitter.py:226 - Splitting text with split_by: word, chunk_size: 350, chunk_overlap: 100
2025-07-02 16:28:18,747 - INFO - adalflow.components.data_process.text_splitter - text_splitter.py:309 - Text split by ' ' into 353 parts.
2025-07-02 16:28:18,747 - INFO - adalflow.components.data_process.text_splitter - text_splitter.py:231 - Text split into 353 parts.
2025-07-02 16:28:18,747 - INFO - adalflow.components.data_process.text_splitter - text_splitter.py:351 - Merged into 2 chunks.
2025-07-02 16:28:18,747 - INFO - adalflow.components.data_process.text_splitter - text_splitter.py:235 - Text merged into 2 chunks.
2025-07-02 16:28:18,748 - INFO - adalflow.components.data_process.text_splitter - text_splitter.py:226 - Splitting text with split_by: word, chunk_size: 350, chunk_overlap: 100
2025-07-02 16:28:18,748 - INFO - adalflow.components.data_process.text_splitter - text_splitter.py:309 - Text split by ' ' into 3 parts.
2025-07-02 16:28:18,748 - INFO - adalflow.components.data_process.text_splitter - text_splitter.py:231 - Text split into 3 parts.
2025-07-02 16:28:18,748 - INFO - adalflow.components.data_process.text_splitter - text_splitter.py:351 - Merged into 1 chunks.
2025-07-02 16:28:18,748 - INFO - adalflow.components.data_process.text_splitter - text_splitter.py:235 - Text merged into 1 chunks.
2025-07-02 16:28:18,750 - INFO - adalflow.components.data_process.text_splitter - text_splitter.py:298 - Processed 4 documents into 18 split documents.
2025-07-02 16:28:18,751 - INFO - api.openai_client - openai_client.py:416 - api_kwargs: {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}
2025-07-02 16:28:20,616 - INFO - api.data_pipeline - data_pipeline.py:786 - Total documents: 4
2025-07-02 16:28:20,616 - INFO - api.data_pipeline - data_pipeline.py:788 - Total transformed documents: 18
2025-07-02 16:28:20,616 - INFO - api.rag - rag.py:421 - Loaded 18 documents for retrieval
2025-07-02 16:28:20,616 - INFO - api.rag - rag.py:350 - Target embedding size: 256 (found in 18 documents)
2025-07-02 16:28:20,616 - INFO - api.rag - rag.py:384 - Embedding validation complete: 18/18 documents have valid embeddings
2025-07-02 16:28:20,616 - INFO - api.rag - rag.py:429 - Using 18 documents with valid embeddings for retrieval
2025-07-02 16:28:20,617 - INFO - adalflow.optim.grad_component - grad_component.py:79 - EvalFnToTextLoss: No backward engine provided. Creating one using model_client and model_kwargs.
2025-07-02 16:28:20,619 - INFO - adalflow.components.retriever.faiss_retriever - faiss_retriever.py:190 - Index built with 18 chunks
2025-07-02 16:28:20,619 - INFO - api.rag - rag.py:440 - FAISS retriever created successfully
2025-07-02 16:28:20,619 - INFO - api.websocket_wiki - websocket_wiki.py:108 - Retriever prepared for https://github.com/niranjandasMM/LLM_agents/
2025-07-02 16:28:20,619 - INFO - api.openai_client - openai_client.py:416 - api_kwargs: {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['Analyze this GitHub repository niranjandasMM/LLM_agents and create a wiki structure for it.\n\n1. The complete file tree of the project:\n<file_tree>\ncrew_ai_jira_agent.ipynb\nenv.exmaple\njira_parent_agent.ipynb\njira_tools.py\nreadme.md\nrequirements.txt\nrun_crewai_jira_agent.py\n</file_tree>\n\n2. The README file of the project:\n<readme>\n# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## ð\x9f\x9a\x80 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## ð\x9f\x93\x8b Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## ð\x9f\x9b\xa0ï¸\x8f Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## â\x9a\x99ï¸\x8f Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## ð\x9f\x8e¯ Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## ð\x9f\x93\x8c Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## ð\x9f¤\x9d Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## ð\x9f\x93\x9d License\n<Approiate license>\n\n## ð\x9f\x99\x8f Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## ð\x9f\x90\x9b Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n\n</readme>\n\nI want to create a wiki for this repository. Determine the most logical structure for a wiki based on the repository\'s content.\n\nIMPORTANT: The wiki content will be generated in English language.\n\nWhen designing the wiki structure, include pages that would benefit from visual diagrams, such as:\n- Architecture overviews\n- Data flow descriptions\n- Component relationships\n- Process workflows\n- State machines\n- Class hierarchies\n\n\nCreate a structured wiki with the following main sections:\n- Overview (general information about the project)\n- System Architecture (how the system is designed)\n- Core Features (key functionality)\n- Data Management/Flow: If applicable, how data is stored, processed, accessed, and managed (e.g., database schema, data pipelines, state management).\n- Frontend Components (UI elements, if applicable.)\n- Backend Systems (server-side components)\n- Model Integration (AI model connections)\n- Deployment/Infrastructure (how to deploy, what\'s the infrastructure like)\n- Extensibility and Customization: If the project architecture supports it, explain how to extend or customize its functionality (e.g., plugins, theming, custom modules, hooks).\n\nEach section should contain relevant pages. For example, the "Frontend Components" section might include pages for "Home Page", "Repository Wiki Page", "Ask Component", etc.\n\nReturn your analysis in the following XML format:\n\n<wiki_structure>\n  <title>[Overall title for the wiki]</title>\n  <description>[Brief description of the repository]</description>\n  <sections>\n    <section id="section-1">\n      <title>[Section title]</title>\n      <pages>\n        <page_ref>page-1</page_ref>\n        <page_ref>page-2</page_ref>\n      </pages>\n      <subsections>\n        <section_ref>section-2</section_ref>\n      </subsections>\n    </section>\n    <!-- More sections as needed -->\n  </sections>\n  <pages>\n    <page id="page-1">\n      <title>[Page title]</title>\n      <description>[Brief description of what this page will cover]</description>\n      <importance>high|medium|low</importance>\n      <relevant_files>\n        <file_path>[Path to a relevant file]</file_path>\n        <!-- More file paths as needed -->\n      </relevant_files>\n      <related_pages>\n        <related>page-2</related>\n        <!-- More related page IDs as needed -->\n      </related_pages>\n      <parent_section>section-1</parent_section>\n    </page>\n    <!-- More pages as needed -->\n  </pages>\n</wiki_structure>\n\n\nIMPORTANT FORMATTING INSTRUCTIONS:\n- Return ONLY the valid XML structure specified above\n- DO NOT wrap the XML in markdown code blocks (no ``` or ```xml)\n- DO NOT include any explanation text before or after the XML\n- Ensure the XML is properly formatted and valid\n- Start directly with <wiki_structure> and end with </wiki_structure>\n\nIMPORTANT:\n1. Create 8-12 pages that would make a comprehensive wiki for this repository\n2. Each page should focus on a specific aspect of the codebase (e.g., architecture, key features, setup)\n3. The relevant_files should be actual files from the repository that would be used to generate that page\n4. Return ONLY valid XML with the structure specified above, with no markdown code block delimiters']}
2025-07-02 16:28:21,272 - INFO - api.websocket_wiki - websocket_wiki.py:211 - Retrieved 18 documents
2025-07-02 16:28:21,272 - INFO - api.rag - rag.py:73 - Dialog turns list exists but is empty
2025-07-02 16:28:21,272 - INFO - api.rag - rag.py:87 - Returning 0 dialog turns from memory
2025-07-02 16:28:21,272 - INFO - api.websocket_wiki - websocket_wiki.py:483 - Using Openai protocol with model: gpt-4o-mini
2025-07-02 16:28:21,289 - INFO - api.websocket_wiki - websocket_wiki.py:566 - Making Openai API call
2025-07-02 16:28:49,351 - INFO - api.websocket_wiki - websocket_wiki.py:79 - Request size: 1323 tokens
2025-07-02 16:28:49,361 - INFO - adalflow.core.prompt_builder - prompt_builder.py:74 - Prompt has variables: ['schema']
2025-07-02 16:28:49,361 - INFO - adalflow.core.prompt_builder - prompt_builder.py:74 - Prompt has variables: ['schema']
2025-07-02 16:28:49,361 - INFO - api.rag - rag.py:73 - Dialog turns list exists but is empty
2025-07-02 16:28:49,361 - INFO - api.rag - rag.py:87 - Returning 0 dialog turns from memory
2025-07-02 16:28:49,377 - INFO - adalflow.optim.grad_component - grad_component.py:79 - EvalFnToTextLoss: No backward engine provided. Creating one using model_client and model_kwargs.
2025-07-02 16:28:49,380 - INFO - adalflow.core.prompt_builder - prompt_builder.py:74 - Prompt has variables: ['contexts', 'system_prompt', 'conversation_history', 'output_format_str', 'input_str']
2025-07-02 16:28:49,380 - INFO - adalflow.core.generator - generator.py:180 - Generator Generator initialized.
2025-07-02 16:28:49,380 - INFO - api.data_pipeline - data_pipeline.py:705 - Preparing repo storage for https://github.com/niranjandasMM/LLM_agents/...
2025-07-02 16:28:49,380 - INFO - api.data_pipeline - data_pipeline.py:715 - Extracted repo name: niranjandasMM_LLM_agents
2025-07-02 16:28:49,380 - INFO - api.data_pipeline - data_pipeline.py:724 - Repository already exists at /Users/niranjanadas_m/.adalflow/repos/niranjandasMM_LLM_agents. Using existing repository.
2025-07-02 16:28:49,380 - INFO - api.data_pipeline - data_pipeline.py:738 - Repo paths: {'save_repo_dir': '/Users/niranjanadas_m/.adalflow/repos/niranjandasMM_LLM_agents', 'save_db_file': '/Users/niranjanadas_m/.adalflow/databases/niranjandasMM_LLM_agents.pkl'}
2025-07-02 16:28:49,380 - INFO - api.data_pipeline - data_pipeline.py:762 - Loading existing database...
2025-07-02 16:28:49,385 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict TextSplitter, {'type': 'TextSplitter', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'TextSplitter', '_init_args': {'split_by': 'word', 'chunk_size': 800, 'chunk_overlap': 200, 'batch_size': 1000, 'separators': {'page': '\x0c', 'passage': '\n\n', 'word': ' ', 'sentence': '.', 'token': ''}}, 'split_by': 'word', 'separators': {'page': '\x0c', 'passage': '\n\n', 'word': ' ', 'sentence': '.', 'token': ''}, 'chunk_size': 350, 'chunk_overlap': 100, 'batch_size': 1000}}
2025-07-02 16:28:49,386 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict ToEmbeddings, {'type': 'ToEmbeddings', 'data': {'_components': {'_ordered_dict': True, 'data': [('embedder', {'type': 'Embedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('model_client', {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'Embedder', '_init_args': {'model_client': None, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}}), ('batch_embedder', {'type': 'BatchEmbedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('embedder', {'type': 'Embedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('model_client', {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'Embedder', '_init_args': {'model_client': None, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'BatchEmbedder', '_init_args': {'embedder': None, 'batch_size': 500}, 'batch_size': 500}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'ToEmbeddings', '_init_args': {'embedder': None, 'batch_size': 500}, 'batch_size': 500}}
2025-07-02 16:28:49,387 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict Embedder, {'type': 'Embedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('model_client', {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'Embedder', '_init_args': {'model_client': None, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}}
2025-07-02 16:28:49,388 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict OpenAIClient, {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}}
2025-07-02 16:28:49,413 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict BatchEmbedder, {'type': 'BatchEmbedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('embedder', {'type': 'Embedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('model_client', {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'Embedder', '_init_args': {'model_client': None, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'BatchEmbedder', '_init_args': {'embedder': None, 'batch_size': 500}, 'batch_size': 500}}
2025-07-02 16:28:49,414 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict Embedder, {'type': 'Embedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('model_client', {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'Embedder', '_init_args': {'model_client': None, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}}
2025-07-02 16:28:49,415 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict OpenAIClient, {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}}
2025-07-02 16:28:49,430 - INFO - api.data_pipeline - data_pipeline.py:767 - Loaded 18 documents from existing database
2025-07-02 16:28:49,431 - INFO - api.rag - rag.py:421 - Loaded 18 documents for retrieval
2025-07-02 16:28:49,431 - INFO - api.rag - rag.py:350 - Target embedding size: 256 (found in 18 documents)
2025-07-02 16:28:49,431 - INFO - api.rag - rag.py:384 - Embedding validation complete: 18/18 documents have valid embeddings
2025-07-02 16:28:49,431 - INFO - api.rag - rag.py:429 - Using 18 documents with valid embeddings for retrieval
2025-07-02 16:28:49,431 - INFO - adalflow.optim.grad_component - grad_component.py:79 - EvalFnToTextLoss: No backward engine provided. Creating one using model_client and model_kwargs.
2025-07-02 16:28:49,431 - INFO - adalflow.components.retriever.faiss_retriever - faiss_retriever.py:190 - Index built with 18 chunks
2025-07-02 16:28:49,431 - INFO - api.rag - rag.py:440 - FAISS retriever created successfully
2025-07-02 16:28:49,431 - INFO - api.websocket_wiki - websocket_wiki.py:108 - Retriever prepared for https://github.com/niranjandasMM/LLM_agents/
2025-07-02 16:28:49,431 - INFO - api.openai_client - openai_client.py:416 - api_kwargs: {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['You are an expert technical writer and software architect.\nYour task is to generate a comprehensive and accurate technical wiki page in Markdown format about a specific feature, system, or module within a given software project.\n\nYou will be given:\n1. The "[WIKI_PAGE_TOPIC]" for the page you need to create.\n2. A list of "[RELEVANT_SOURCE_FILES]" from the project that you MUST use as the sole basis for the content. You have access to the full content of these files. You MUST use AT LEAST 5 relevant source files for comprehensive coverage - if fewer are provided, search for additional related files in the codebase.\n\nCRITICAL STARTING INSTRUCTION:\nThe very first thing on the page MUST be a `<details>` block listing ALL the `[RELEVANT_SOURCE_FILES]` you used to generate the content. There MUST be AT LEAST 5 source files listed - if fewer were provided, you MUST find additional related files to include.\nFormat it exactly like this:\n<details>\n<summary>Relevant source files</summary>\n\nRemember, do not provide any acknowledgements, disclaimers, apologies, or any other preface before the `<details>` block. JUST START with the `<details>` block.\nThe following files were used as context for generating this wiki page:\n\n- [readme.md](readme.md)\n<!-- Add additional relevant files if fewer than 5 were provided -->\n</details>\n\nImmediately after the `<details>` block, the main title of the page should be a H1 Markdown heading: `# Project Overview`.\n\nBased ONLY on the content of the `[RELEVANT_SOURCE_FILES]`:\n\n1.  **Introduction:** Start with a concise introduction (1-2 paragraphs) explaining the purpose, scope, and high-level overview of "Project Overview" within the context of the overall project. If relevant, and if information is available in the provided files, link to other potential wiki pages using the format `[Link Text](#page-anchor-or-id)`.\n\n2.  **Detailed Sections:** Break down "Project Overview" into logical sections using H2 (`##`) and H3 (`###`) Markdown headings. For each section:\n    *   Explain the architecture, components, data flow, or logic relevant to the section\'s focus, as evidenced in the source files.\n    *   Identify key functions, classes, data structures, API endpoints, or configuration elements pertinent to that section.\n\n3.  **Mermaid Diagrams:**\n    *   EXTENSIVELY use Mermaid diagrams (e.g., `flowchart TD`, `sequenceDiagram`, `classDiagram`, `erDiagram`, `graph TD`) to visually represent architectures, flows, relationships, and schemas found in the source files.\n    *   Ensure diagrams are accurate and directly derived from information in the `[RELEVANT_SOURCE_FILES]`.\n    *   Provide a brief explanation before or after each diagram to give context.\n    *   CRITICAL: All diagrams MUST follow strict vertical orientation:\n       - Use "graph TD" (top-down) directive for flow diagrams\n       - NEVER use "graph LR" (left-right)\n       - Maximum node width should be 3-4 words\n       - For sequence diagrams:\n         - Start with "sequenceDiagram" directive on its own line\n         - Define ALL participants at the beginning\n         - Use descriptive but concise participant names\n         - Use the correct arrow types:\n           - ->> for request/asynchronous messages\n           - -->> for response messages\n           - -x for failed messages\n         - Include activation boxes using +/- notation\n         - Add notes for clarification using "Note over" or "Note right of"\n\n4.  **Tables:**\n    *   Use Markdown tables to summarize information such as:\n        *   Key features or components and their descriptions.\n        *   API endpoint parameters, types, and descriptions.\n        *   Configuration options, their types, and default values.\n        *   Data model fields, types, constraints, and descriptions.\n\n5.  **Code Snippets:**\n    *   Include short, relevant code snippets (e.g., Python, Java, JavaScript, SQL, JSON, YAML) directly from the `[RELEVANT_SOURCE_FILES]` to illustrate key implementation details, data structures, or configurations.\n    *   Ensure snippets are well-formatted within Markdown code blocks with appropriate language identifiers.\n\n6.  **Source Citations (EXTREMELY IMPORTANT):**\n    *   For EVERY piece of significant information, explanation, diagram, table entry, or code snippet, you MUST cite the specific source file(s) and relevant line numbers from which the information was derived.\n    *   Place citations at the end of the paragraph, under the diagram/table, or after the code snippet.\n    *   Use the exact format: `Sources: [filename.ext:start_line-end_line]()` for a range, or `Sources: [filename.ext:line_number]()` for a single line. Multiple files can be cited: `Sources: [file1.ext:1-10](), [file2.ext:5](), [dir/file3.ext]()` (if the whole file is relevant and line numbers are not applicable or too broad).\n    *   If an entire section is overwhelmingly based on one or two files, you can cite them under the section heading in addition to more specific citations within the section.\n    *   IMPORTANT: You MUST cite AT LEAST 5 different source files throughout the wiki page to ensure comprehensive coverage.\n\n7.  **Technical Accuracy:** All information must be derived SOLELY from the `[RELEVANT_SOURCE_FILES]`. Do not infer, invent, or use external knowledge about similar systems or common practices unless it\'s directly supported by the provided code. If information is not present in the provided files, do not include it or explicitly state its absence if crucial to the topic.\n\n8.  **Clarity and Conciseness:** Use clear, professional, and concise technical language suitable for other developers working on or learning about the project. Avoid unnecessary jargon, but use correct technical terms where appropriate.\n\n9.  **Conclusion/Summary:** End with a brief summary paragraph if appropriate for "Project Overview", reiterating the key aspects covered and their significance within the project.\n\nIMPORTANT: Generate the content in English language.\n\nRemember:\n- Ground every claim in the provided source files.\n- Prioritize accuracy and direct representation of the code\'s functionality and structure.\n- Structure the document logically for easy understanding by other developers.\n']}
2025-07-02 16:28:50,238 - INFO - api.websocket_wiki - websocket_wiki.py:211 - Retrieved 18 documents
2025-07-02 16:28:50,239 - INFO - api.rag - rag.py:73 - Dialog turns list exists but is empty
2025-07-02 16:28:50,239 - INFO - api.rag - rag.py:87 - Returning 0 dialog turns from memory
2025-07-02 16:28:50,239 - INFO - api.websocket_wiki - websocket_wiki.py:483 - Using Openai protocol with model: gpt-4o-mini
2025-07-02 16:28:50,257 - INFO - api.websocket_wiki - websocket_wiki.py:566 - Making Openai API call
2025-07-02 16:29:02,684 - INFO - api.websocket_wiki - websocket_wiki.py:79 - Request size: 1333 tokens
2025-07-02 16:29:02,695 - INFO - adalflow.core.prompt_builder - prompt_builder.py:74 - Prompt has variables: ['schema']
2025-07-02 16:29:02,696 - INFO - adalflow.core.prompt_builder - prompt_builder.py:74 - Prompt has variables: ['schema']
2025-07-02 16:29:02,696 - INFO - api.rag - rag.py:73 - Dialog turns list exists but is empty
2025-07-02 16:29:02,696 - INFO - api.rag - rag.py:87 - Returning 0 dialog turns from memory
2025-07-02 16:29:02,711 - INFO - adalflow.optim.grad_component - grad_component.py:79 - EvalFnToTextLoss: No backward engine provided. Creating one using model_client and model_kwargs.
2025-07-02 16:29:02,714 - INFO - adalflow.core.prompt_builder - prompt_builder.py:74 - Prompt has variables: ['contexts', 'system_prompt', 'conversation_history', 'output_format_str', 'input_str']
2025-07-02 16:29:02,714 - INFO - adalflow.core.generator - generator.py:180 - Generator Generator initialized.
2025-07-02 16:29:02,715 - INFO - api.data_pipeline - data_pipeline.py:705 - Preparing repo storage for https://github.com/niranjandasMM/LLM_agents/...
2025-07-02 16:29:02,715 - INFO - api.data_pipeline - data_pipeline.py:715 - Extracted repo name: niranjandasMM_LLM_agents
2025-07-02 16:29:02,715 - INFO - api.data_pipeline - data_pipeline.py:724 - Repository already exists at /Users/niranjanadas_m/.adalflow/repos/niranjandasMM_LLM_agents. Using existing repository.
2025-07-02 16:29:02,715 - INFO - api.data_pipeline - data_pipeline.py:738 - Repo paths: {'save_repo_dir': '/Users/niranjanadas_m/.adalflow/repos/niranjandasMM_LLM_agents', 'save_db_file': '/Users/niranjanadas_m/.adalflow/databases/niranjandasMM_LLM_agents.pkl'}
2025-07-02 16:29:02,715 - INFO - api.data_pipeline - data_pipeline.py:762 - Loading existing database...
2025-07-02 16:29:02,717 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict TextSplitter, {'type': 'TextSplitter', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'TextSplitter', '_init_args': {'split_by': 'word', 'chunk_size': 800, 'chunk_overlap': 200, 'batch_size': 1000, 'separators': {'page': '\x0c', 'passage': '\n\n', 'word': ' ', 'sentence': '.', 'token': ''}}, 'split_by': 'word', 'separators': {'page': '\x0c', 'passage': '\n\n', 'word': ' ', 'sentence': '.', 'token': ''}, 'chunk_size': 350, 'chunk_overlap': 100, 'batch_size': 1000}}
2025-07-02 16:29:02,717 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict ToEmbeddings, {'type': 'ToEmbeddings', 'data': {'_components': {'_ordered_dict': True, 'data': [('embedder', {'type': 'Embedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('model_client', {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'Embedder', '_init_args': {'model_client': None, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}}), ('batch_embedder', {'type': 'BatchEmbedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('embedder', {'type': 'Embedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('model_client', {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'Embedder', '_init_args': {'model_client': None, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'BatchEmbedder', '_init_args': {'embedder': None, 'batch_size': 500}, 'batch_size': 500}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'ToEmbeddings', '_init_args': {'embedder': None, 'batch_size': 500}, 'batch_size': 500}}
2025-07-02 16:29:02,718 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict Embedder, {'type': 'Embedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('model_client', {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'Embedder', '_init_args': {'model_client': None, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}}
2025-07-02 16:29:02,720 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict OpenAIClient, {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}}
2025-07-02 16:29:02,747 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict BatchEmbedder, {'type': 'BatchEmbedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('embedder', {'type': 'Embedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('model_client', {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'Embedder', '_init_args': {'model_client': None, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'BatchEmbedder', '_init_args': {'embedder': None, 'batch_size': 500}, 'batch_size': 500}}
2025-07-02 16:29:02,749 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict Embedder, {'type': 'Embedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('model_client', {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'Embedder', '_init_args': {'model_client': None, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}}
2025-07-02 16:29:02,750 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict OpenAIClient, {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}}
2025-07-02 16:29:02,765 - INFO - api.data_pipeline - data_pipeline.py:767 - Loaded 18 documents from existing database
2025-07-02 16:29:02,765 - INFO - api.rag - rag.py:421 - Loaded 18 documents for retrieval
2025-07-02 16:29:02,765 - INFO - api.rag - rag.py:350 - Target embedding size: 256 (found in 18 documents)
2025-07-02 16:29:02,765 - INFO - api.rag - rag.py:384 - Embedding validation complete: 18/18 documents have valid embeddings
2025-07-02 16:29:02,765 - INFO - api.rag - rag.py:429 - Using 18 documents with valid embeddings for retrieval
2025-07-02 16:29:02,765 - INFO - adalflow.optim.grad_component - grad_component.py:79 - EvalFnToTextLoss: No backward engine provided. Creating one using model_client and model_kwargs.
2025-07-02 16:29:02,765 - INFO - adalflow.components.retriever.faiss_retriever - faiss_retriever.py:190 - Index built with 18 chunks
2025-07-02 16:29:02,765 - INFO - api.rag - rag.py:440 - FAISS retriever created successfully
2025-07-02 16:29:02,765 - INFO - api.websocket_wiki - websocket_wiki.py:108 - Retriever prepared for https://github.com/niranjandasMM/LLM_agents/
2025-07-02 16:29:02,765 - INFO - api.openai_client - openai_client.py:416 - api_kwargs: {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['You are an expert technical writer and software architect.\nYour task is to generate a comprehensive and accurate technical wiki page in Markdown format about a specific feature, system, or module within a given software project.\n\nYou will be given:\n1. The "[WIKI_PAGE_TOPIC]" for the page you need to create.\n2. A list of "[RELEVANT_SOURCE_FILES]" from the project that you MUST use as the sole basis for the content. You have access to the full content of these files. You MUST use AT LEAST 5 relevant source files for comprehensive coverage - if fewer are provided, search for additional related files in the codebase.\n\nCRITICAL STARTING INSTRUCTION:\nThe very first thing on the page MUST be a `<details>` block listing ALL the `[RELEVANT_SOURCE_FILES]` you used to generate the content. There MUST be AT LEAST 5 source files listed - if fewer were provided, you MUST find additional related files to include.\nFormat it exactly like this:\n<details>\n<summary>Relevant source files</summary>\n\nRemember, do not provide any acknowledgements, disclaimers, apologies, or any other preface before the `<details>` block. JUST START with the `<details>` block.\nThe following files were used as context for generating this wiki page:\n\n- [run_crewai_jira_agent.py](run_crewai_jira_agent.py)\n<!-- Add additional relevant files if fewer than 5 were provided -->\n</details>\n\nImmediately after the `<details>` block, the main title of the page should be a H1 Markdown heading: `# Architecture Overview`.\n\nBased ONLY on the content of the `[RELEVANT_SOURCE_FILES]`:\n\n1.  **Introduction:** Start with a concise introduction (1-2 paragraphs) explaining the purpose, scope, and high-level overview of "Architecture Overview" within the context of the overall project. If relevant, and if information is available in the provided files, link to other potential wiki pages using the format `[Link Text](#page-anchor-or-id)`.\n\n2.  **Detailed Sections:** Break down "Architecture Overview" into logical sections using H2 (`##`) and H3 (`###`) Markdown headings. For each section:\n    *   Explain the architecture, components, data flow, or logic relevant to the section\'s focus, as evidenced in the source files.\n    *   Identify key functions, classes, data structures, API endpoints, or configuration elements pertinent to that section.\n\n3.  **Mermaid Diagrams:**\n    *   EXTENSIVELY use Mermaid diagrams (e.g., `flowchart TD`, `sequenceDiagram`, `classDiagram`, `erDiagram`, `graph TD`) to visually represent architectures, flows, relationships, and schemas found in the source files.\n    *   Ensure diagrams are accurate and directly derived from information in the `[RELEVANT_SOURCE_FILES]`.\n    *   Provide a brief explanation before or after each diagram to give context.\n    *   CRITICAL: All diagrams MUST follow strict vertical orientation:\n       - Use "graph TD" (top-down) directive for flow diagrams\n       - NEVER use "graph LR" (left-right)\n       - Maximum node width should be 3-4 words\n       - For sequence diagrams:\n         - Start with "sequenceDiagram" directive on its own line\n         - Define ALL participants at the beginning\n         - Use descriptive but concise participant names\n         - Use the correct arrow types:\n           - ->> for request/asynchronous messages\n           - -->> for response messages\n           - -x for failed messages\n         - Include activation boxes using +/- notation\n         - Add notes for clarification using "Note over" or "Note right of"\n\n4.  **Tables:**\n    *   Use Markdown tables to summarize information such as:\n        *   Key features or components and their descriptions.\n        *   API endpoint parameters, types, and descriptions.\n        *   Configuration options, their types, and default values.\n        *   Data model fields, types, constraints, and descriptions.\n\n5.  **Code Snippets:**\n    *   Include short, relevant code snippets (e.g., Python, Java, JavaScript, SQL, JSON, YAML) directly from the `[RELEVANT_SOURCE_FILES]` to illustrate key implementation details, data structures, or configurations.\n    *   Ensure snippets are well-formatted within Markdown code blocks with appropriate language identifiers.\n\n6.  **Source Citations (EXTREMELY IMPORTANT):**\n    *   For EVERY piece of significant information, explanation, diagram, table entry, or code snippet, you MUST cite the specific source file(s) and relevant line numbers from which the information was derived.\n    *   Place citations at the end of the paragraph, under the diagram/table, or after the code snippet.\n    *   Use the exact format: `Sources: [filename.ext:start_line-end_line]()` for a range, or `Sources: [filename.ext:line_number]()` for a single line. Multiple files can be cited: `Sources: [file1.ext:1-10](), [file2.ext:5](), [dir/file3.ext]()` (if the whole file is relevant and line numbers are not applicable or too broad).\n    *   If an entire section is overwhelmingly based on one or two files, you can cite them under the section heading in addition to more specific citations within the section.\n    *   IMPORTANT: You MUST cite AT LEAST 5 different source files throughout the wiki page to ensure comprehensive coverage.\n\n7.  **Technical Accuracy:** All information must be derived SOLELY from the `[RELEVANT_SOURCE_FILES]`. Do not infer, invent, or use external knowledge about similar systems or common practices unless it\'s directly supported by the provided code. If information is not present in the provided files, do not include it or explicitly state its absence if crucial to the topic.\n\n8.  **Clarity and Conciseness:** Use clear, professional, and concise technical language suitable for other developers working on or learning about the project. Avoid unnecessary jargon, but use correct technical terms where appropriate.\n\n9.  **Conclusion/Summary:** End with a brief summary paragraph if appropriate for "Architecture Overview", reiterating the key aspects covered and their significance within the project.\n\nIMPORTANT: Generate the content in English language.\n\nRemember:\n- Ground every claim in the provided source files.\n- Prioritize accuracy and direct representation of the code\'s functionality and structure.\n- Structure the document logically for easy understanding by other developers.\n']}
2025-07-02 16:29:03,484 - INFO - api.websocket_wiki - websocket_wiki.py:211 - Retrieved 18 documents
2025-07-02 16:29:03,485 - INFO - api.rag - rag.py:73 - Dialog turns list exists but is empty
2025-07-02 16:29:03,485 - INFO - api.rag - rag.py:87 - Returning 0 dialog turns from memory
2025-07-02 16:29:03,485 - INFO - api.websocket_wiki - websocket_wiki.py:483 - Using Openai protocol with model: gpt-4o-mini
2025-07-02 16:29:03,498 - INFO - api.websocket_wiki - websocket_wiki.py:566 - Making Openai API call
2025-07-02 16:29:22,235 - INFO - api.websocket_wiki - websocket_wiki.py:79 - Request size: 1325 tokens
2025-07-02 16:29:22,249 - INFO - adalflow.core.prompt_builder - prompt_builder.py:74 - Prompt has variables: ['schema']
2025-07-02 16:29:22,250 - INFO - adalflow.core.prompt_builder - prompt_builder.py:74 - Prompt has variables: ['schema']
2025-07-02 16:29:22,250 - INFO - api.rag - rag.py:73 - Dialog turns list exists but is empty
2025-07-02 16:29:22,250 - INFO - api.rag - rag.py:87 - Returning 0 dialog turns from memory
2025-07-02 16:29:22,269 - INFO - adalflow.optim.grad_component - grad_component.py:79 - EvalFnToTextLoss: No backward engine provided. Creating one using model_client and model_kwargs.
2025-07-02 16:29:22,273 - INFO - adalflow.core.prompt_builder - prompt_builder.py:74 - Prompt has variables: ['contexts', 'system_prompt', 'conversation_history', 'output_format_str', 'input_str']
2025-07-02 16:29:22,273 - INFO - adalflow.core.generator - generator.py:180 - Generator Generator initialized.
2025-07-02 16:29:22,273 - INFO - api.data_pipeline - data_pipeline.py:705 - Preparing repo storage for https://github.com/niranjandasMM/LLM_agents/...
2025-07-02 16:29:22,273 - INFO - api.data_pipeline - data_pipeline.py:715 - Extracted repo name: niranjandasMM_LLM_agents
2025-07-02 16:29:22,273 - INFO - api.data_pipeline - data_pipeline.py:724 - Repository already exists at /Users/niranjanadas_m/.adalflow/repos/niranjandasMM_LLM_agents. Using existing repository.
2025-07-02 16:29:22,273 - INFO - api.data_pipeline - data_pipeline.py:738 - Repo paths: {'save_repo_dir': '/Users/niranjanadas_m/.adalflow/repos/niranjandasMM_LLM_agents', 'save_db_file': '/Users/niranjanadas_m/.adalflow/databases/niranjandasMM_LLM_agents.pkl'}
2025-07-02 16:29:22,273 - INFO - api.data_pipeline - data_pipeline.py:762 - Loading existing database...
2025-07-02 16:29:22,275 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict TextSplitter, {'type': 'TextSplitter', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'TextSplitter', '_init_args': {'split_by': 'word', 'chunk_size': 800, 'chunk_overlap': 200, 'batch_size': 1000, 'separators': {'page': '\x0c', 'passage': '\n\n', 'word': ' ', 'sentence': '.', 'token': ''}}, 'split_by': 'word', 'separators': {'page': '\x0c', 'passage': '\n\n', 'word': ' ', 'sentence': '.', 'token': ''}, 'chunk_size': 350, 'chunk_overlap': 100, 'batch_size': 1000}}
2025-07-02 16:29:22,276 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict ToEmbeddings, {'type': 'ToEmbeddings', 'data': {'_components': {'_ordered_dict': True, 'data': [('embedder', {'type': 'Embedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('model_client', {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'Embedder', '_init_args': {'model_client': None, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}}), ('batch_embedder', {'type': 'BatchEmbedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('embedder', {'type': 'Embedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('model_client', {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'Embedder', '_init_args': {'model_client': None, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'BatchEmbedder', '_init_args': {'embedder': None, 'batch_size': 500}, 'batch_size': 500}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'ToEmbeddings', '_init_args': {'embedder': None, 'batch_size': 500}, 'batch_size': 500}}
2025-07-02 16:29:22,277 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict Embedder, {'type': 'Embedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('model_client', {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'Embedder', '_init_args': {'model_client': None, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}}
2025-07-02 16:29:22,277 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict OpenAIClient, {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}}
2025-07-02 16:29:22,298 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict BatchEmbedder, {'type': 'BatchEmbedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('embedder', {'type': 'Embedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('model_client', {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'Embedder', '_init_args': {'model_client': None, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'BatchEmbedder', '_init_args': {'embedder': None, 'batch_size': 500}, 'batch_size': 500}}
2025-07-02 16:29:22,299 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict Embedder, {'type': 'Embedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('model_client', {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'Embedder', '_init_args': {'model_client': None, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}}
2025-07-02 16:29:22,300 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict OpenAIClient, {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}}
2025-07-02 16:29:22,314 - INFO - api.data_pipeline - data_pipeline.py:767 - Loaded 18 documents from existing database
2025-07-02 16:29:22,314 - INFO - api.rag - rag.py:421 - Loaded 18 documents for retrieval
2025-07-02 16:29:22,314 - INFO - api.rag - rag.py:350 - Target embedding size: 256 (found in 18 documents)
2025-07-02 16:29:22,314 - INFO - api.rag - rag.py:384 - Embedding validation complete: 18/18 documents have valid embeddings
2025-07-02 16:29:22,314 - INFO - api.rag - rag.py:429 - Using 18 documents with valid embeddings for retrieval
2025-07-02 16:29:22,314 - INFO - adalflow.optim.grad_component - grad_component.py:79 - EvalFnToTextLoss: No backward engine provided. Creating one using model_client and model_kwargs.
2025-07-02 16:29:22,315 - INFO - adalflow.components.retriever.faiss_retriever - faiss_retriever.py:190 - Index built with 18 chunks
2025-07-02 16:29:22,315 - INFO - api.rag - rag.py:440 - FAISS retriever created successfully
2025-07-02 16:29:22,315 - INFO - api.websocket_wiki - websocket_wiki.py:108 - Retriever prepared for https://github.com/niranjandasMM/LLM_agents/
2025-07-02 16:29:22,315 - INFO - api.openai_client - openai_client.py:416 - api_kwargs: {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['You are an expert technical writer and software architect.\nYour task is to generate a comprehensive and accurate technical wiki page in Markdown format about a specific feature, system, or module within a given software project.\n\nYou will be given:\n1. The "[WIKI_PAGE_TOPIC]" for the page you need to create.\n2. A list of "[RELEVANT_SOURCE_FILES]" from the project that you MUST use as the sole basis for the content. You have access to the full content of these files. You MUST use AT LEAST 5 relevant source files for comprehensive coverage - if fewer are provided, search for additional related files in the codebase.\n\nCRITICAL STARTING INSTRUCTION:\nThe very first thing on the page MUST be a `<details>` block listing ALL the `[RELEVANT_SOURCE_FILES]` you used to generate the content. There MUST be AT LEAST 5 source files listed - if fewer were provided, you MUST find additional related files to include.\nFormat it exactly like this:\n<details>\n<summary>Relevant source files</summary>\n\nRemember, do not provide any acknowledgements, disclaimers, apologies, or any other preface before the `<details>` block. JUST START with the `<details>` block.\nThe following files were used as context for generating this wiki page:\n\n- [jira_tools.py](jira_tools.py)\n<!-- Add additional relevant files if fewer than 5 were provided -->\n</details>\n\nImmediately after the `<details>` block, the main title of the page should be a H1 Markdown heading: `# Component Relationships`.\n\nBased ONLY on the content of the `[RELEVANT_SOURCE_FILES]`:\n\n1.  **Introduction:** Start with a concise introduction (1-2 paragraphs) explaining the purpose, scope, and high-level overview of "Component Relationships" within the context of the overall project. If relevant, and if information is available in the provided files, link to other potential wiki pages using the format `[Link Text](#page-anchor-or-id)`.\n\n2.  **Detailed Sections:** Break down "Component Relationships" into logical sections using H2 (`##`) and H3 (`###`) Markdown headings. For each section:\n    *   Explain the architecture, components, data flow, or logic relevant to the section\'s focus, as evidenced in the source files.\n    *   Identify key functions, classes, data structures, API endpoints, or configuration elements pertinent to that section.\n\n3.  **Mermaid Diagrams:**\n    *   EXTENSIVELY use Mermaid diagrams (e.g., `flowchart TD`, `sequenceDiagram`, `classDiagram`, `erDiagram`, `graph TD`) to visually represent architectures, flows, relationships, and schemas found in the source files.\n    *   Ensure diagrams are accurate and directly derived from information in the `[RELEVANT_SOURCE_FILES]`.\n    *   Provide a brief explanation before or after each diagram to give context.\n    *   CRITICAL: All diagrams MUST follow strict vertical orientation:\n       - Use "graph TD" (top-down) directive for flow diagrams\n       - NEVER use "graph LR" (left-right)\n       - Maximum node width should be 3-4 words\n       - For sequence diagrams:\n         - Start with "sequenceDiagram" directive on its own line\n         - Define ALL participants at the beginning\n         - Use descriptive but concise participant names\n         - Use the correct arrow types:\n           - ->> for request/asynchronous messages\n           - -->> for response messages\n           - -x for failed messages\n         - Include activation boxes using +/- notation\n         - Add notes for clarification using "Note over" or "Note right of"\n\n4.  **Tables:**\n    *   Use Markdown tables to summarize information such as:\n        *   Key features or components and their descriptions.\n        *   API endpoint parameters, types, and descriptions.\n        *   Configuration options, their types, and default values.\n        *   Data model fields, types, constraints, and descriptions.\n\n5.  **Code Snippets:**\n    *   Include short, relevant code snippets (e.g., Python, Java, JavaScript, SQL, JSON, YAML) directly from the `[RELEVANT_SOURCE_FILES]` to illustrate key implementation details, data structures, or configurations.\n    *   Ensure snippets are well-formatted within Markdown code blocks with appropriate language identifiers.\n\n6.  **Source Citations (EXTREMELY IMPORTANT):**\n    *   For EVERY piece of significant information, explanation, diagram, table entry, or code snippet, you MUST cite the specific source file(s) and relevant line numbers from which the information was derived.\n    *   Place citations at the end of the paragraph, under the diagram/table, or after the code snippet.\n    *   Use the exact format: `Sources: [filename.ext:start_line-end_line]()` for a range, or `Sources: [filename.ext:line_number]()` for a single line. Multiple files can be cited: `Sources: [file1.ext:1-10](), [file2.ext:5](), [dir/file3.ext]()` (if the whole file is relevant and line numbers are not applicable or too broad).\n    *   If an entire section is overwhelmingly based on one or two files, you can cite them under the section heading in addition to more specific citations within the section.\n    *   IMPORTANT: You MUST cite AT LEAST 5 different source files throughout the wiki page to ensure comprehensive coverage.\n\n7.  **Technical Accuracy:** All information must be derived SOLELY from the `[RELEVANT_SOURCE_FILES]`. Do not infer, invent, or use external knowledge about similar systems or common practices unless it\'s directly supported by the provided code. If information is not present in the provided files, do not include it or explicitly state its absence if crucial to the topic.\n\n8.  **Clarity and Conciseness:** Use clear, professional, and concise technical language suitable for other developers working on or learning about the project. Avoid unnecessary jargon, but use correct technical terms where appropriate.\n\n9.  **Conclusion/Summary:** End with a brief summary paragraph if appropriate for "Component Relationships", reiterating the key aspects covered and their significance within the project.\n\nIMPORTANT: Generate the content in English language.\n\nRemember:\n- Ground every claim in the provided source files.\n- Prioritize accuracy and direct representation of the code\'s functionality and structure.\n- Structure the document logically for easy understanding by other developers.\n']}
2025-07-02 16:29:23,110 - INFO - api.websocket_wiki - websocket_wiki.py:211 - Retrieved 18 documents
2025-07-02 16:29:23,111 - INFO - api.rag - rag.py:73 - Dialog turns list exists but is empty
2025-07-02 16:29:23,111 - INFO - api.rag - rag.py:87 - Returning 0 dialog turns from memory
2025-07-02 16:29:23,111 - INFO - api.websocket_wiki - websocket_wiki.py:483 - Using Openai protocol with model: gpt-4o-mini
2025-07-02 16:29:23,129 - INFO - api.websocket_wiki - websocket_wiki.py:566 - Making Openai API call
2025-07-02 16:29:43,293 - INFO - api.websocket_wiki - websocket_wiki.py:79 - Request size: 1323 tokens
2025-07-02 16:29:43,310 - INFO - adalflow.core.prompt_builder - prompt_builder.py:74 - Prompt has variables: ['schema']
2025-07-02 16:29:43,310 - INFO - adalflow.core.prompt_builder - prompt_builder.py:74 - Prompt has variables: ['schema']
2025-07-02 16:29:43,311 - INFO - api.rag - rag.py:73 - Dialog turns list exists but is empty
2025-07-02 16:29:43,311 - INFO - api.rag - rag.py:87 - Returning 0 dialog turns from memory
2025-07-02 16:29:43,327 - INFO - adalflow.optim.grad_component - grad_component.py:79 - EvalFnToTextLoss: No backward engine provided. Creating one using model_client and model_kwargs.
2025-07-02 16:29:43,330 - INFO - adalflow.core.prompt_builder - prompt_builder.py:74 - Prompt has variables: ['contexts', 'system_prompt', 'conversation_history', 'output_format_str', 'input_str']
2025-07-02 16:29:43,330 - INFO - adalflow.core.generator - generator.py:180 - Generator Generator initialized.
2025-07-02 16:29:43,330 - INFO - api.data_pipeline - data_pipeline.py:705 - Preparing repo storage for https://github.com/niranjandasMM/LLM_agents/...
2025-07-02 16:29:43,331 - INFO - api.data_pipeline - data_pipeline.py:715 - Extracted repo name: niranjandasMM_LLM_agents
2025-07-02 16:29:43,331 - INFO - api.data_pipeline - data_pipeline.py:724 - Repository already exists at /Users/niranjanadas_m/.adalflow/repos/niranjandasMM_LLM_agents. Using existing repository.
2025-07-02 16:29:43,331 - INFO - api.data_pipeline - data_pipeline.py:738 - Repo paths: {'save_repo_dir': '/Users/niranjanadas_m/.adalflow/repos/niranjandasMM_LLM_agents', 'save_db_file': '/Users/niranjanadas_m/.adalflow/databases/niranjandasMM_LLM_agents.pkl'}
2025-07-02 16:29:43,331 - INFO - api.data_pipeline - data_pipeline.py:762 - Loading existing database...
2025-07-02 16:29:43,333 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict TextSplitter, {'type': 'TextSplitter', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'TextSplitter', '_init_args': {'split_by': 'word', 'chunk_size': 800, 'chunk_overlap': 200, 'batch_size': 1000, 'separators': {'page': '\x0c', 'passage': '\n\n', 'word': ' ', 'sentence': '.', 'token': ''}}, 'split_by': 'word', 'separators': {'page': '\x0c', 'passage': '\n\n', 'word': ' ', 'sentence': '.', 'token': ''}, 'chunk_size': 350, 'chunk_overlap': 100, 'batch_size': 1000}}
2025-07-02 16:29:43,335 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict ToEmbeddings, {'type': 'ToEmbeddings', 'data': {'_components': {'_ordered_dict': True, 'data': [('embedder', {'type': 'Embedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('model_client', {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'Embedder', '_init_args': {'model_client': None, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}}), ('batch_embedder', {'type': 'BatchEmbedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('embedder', {'type': 'Embedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('model_client', {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'Embedder', '_init_args': {'model_client': None, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'BatchEmbedder', '_init_args': {'embedder': None, 'batch_size': 500}, 'batch_size': 500}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'ToEmbeddings', '_init_args': {'embedder': None, 'batch_size': 500}, 'batch_size': 500}}
2025-07-02 16:29:43,337 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict Embedder, {'type': 'Embedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('model_client', {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'Embedder', '_init_args': {'model_client': None, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}}
2025-07-02 16:29:43,337 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict OpenAIClient, {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}}
2025-07-02 16:29:43,357 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict BatchEmbedder, {'type': 'BatchEmbedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('embedder', {'type': 'Embedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('model_client', {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'Embedder', '_init_args': {'model_client': None, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'BatchEmbedder', '_init_args': {'embedder': None, 'batch_size': 500}, 'batch_size': 500}}
2025-07-02 16:29:43,358 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict Embedder, {'type': 'Embedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('model_client', {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'Embedder', '_init_args': {'model_client': None, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}}
2025-07-02 16:29:43,359 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict OpenAIClient, {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}}
2025-07-02 16:29:43,376 - INFO - api.data_pipeline - data_pipeline.py:767 - Loaded 18 documents from existing database
2025-07-02 16:29:43,376 - INFO - api.rag - rag.py:421 - Loaded 18 documents for retrieval
2025-07-02 16:29:43,376 - INFO - api.rag - rag.py:350 - Target embedding size: 256 (found in 18 documents)
2025-07-02 16:29:43,376 - INFO - api.rag - rag.py:384 - Embedding validation complete: 18/18 documents have valid embeddings
2025-07-02 16:29:43,376 - INFO - api.rag - rag.py:429 - Using 18 documents with valid embeddings for retrieval
2025-07-02 16:29:43,376 - INFO - adalflow.optim.grad_component - grad_component.py:79 - EvalFnToTextLoss: No backward engine provided. Creating one using model_client and model_kwargs.
2025-07-02 16:29:43,376 - INFO - adalflow.components.retriever.faiss_retriever - faiss_retriever.py:190 - Index built with 18 chunks
2025-07-02 16:29:43,376 - INFO - api.rag - rag.py:440 - FAISS retriever created successfully
2025-07-02 16:29:43,376 - INFO - api.websocket_wiki - websocket_wiki.py:108 - Retriever prepared for https://github.com/niranjandasMM/LLM_agents/
2025-07-02 16:29:43,376 - INFO - api.openai_client - openai_client.py:416 - api_kwargs: {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['You are an expert technical writer and software architect.\nYour task is to generate a comprehensive and accurate technical wiki page in Markdown format about a specific feature, system, or module within a given software project.\n\nYou will be given:\n1. The "[WIKI_PAGE_TOPIC]" for the page you need to create.\n2. A list of "[RELEVANT_SOURCE_FILES]" from the project that you MUST use as the sole basis for the content. You have access to the full content of these files. You MUST use AT LEAST 5 relevant source files for comprehensive coverage - if fewer are provided, search for additional related files in the codebase.\n\nCRITICAL STARTING INSTRUCTION:\nThe very first thing on the page MUST be a `<details>` block listing ALL the `[RELEVANT_SOURCE_FILES]` you used to generate the content. There MUST be AT LEAST 5 source files listed - if fewer were provided, you MUST find additional related files to include.\nFormat it exactly like this:\n<details>\n<summary>Relevant source files</summary>\n\nRemember, do not provide any acknowledgements, disclaimers, apologies, or any other preface before the `<details>` block. JUST START with the `<details>` block.\nThe following files were used as context for generating this wiki page:\n\n- [readme.md](readme.md)\n<!-- Add additional relevant files if fewer than 5 were provided -->\n</details>\n\nImmediately after the `<details>` block, the main title of the page should be a H1 Markdown heading: `# Key Features`.\n\nBased ONLY on the content of the `[RELEVANT_SOURCE_FILES]`:\n\n1.  **Introduction:** Start with a concise introduction (1-2 paragraphs) explaining the purpose, scope, and high-level overview of "Key Features" within the context of the overall project. If relevant, and if information is available in the provided files, link to other potential wiki pages using the format `[Link Text](#page-anchor-or-id)`.\n\n2.  **Detailed Sections:** Break down "Key Features" into logical sections using H2 (`##`) and H3 (`###`) Markdown headings. For each section:\n    *   Explain the architecture, components, data flow, or logic relevant to the section\'s focus, as evidenced in the source files.\n    *   Identify key functions, classes, data structures, API endpoints, or configuration elements pertinent to that section.\n\n3.  **Mermaid Diagrams:**\n    *   EXTENSIVELY use Mermaid diagrams (e.g., `flowchart TD`, `sequenceDiagram`, `classDiagram`, `erDiagram`, `graph TD`) to visually represent architectures, flows, relationships, and schemas found in the source files.\n    *   Ensure diagrams are accurate and directly derived from information in the `[RELEVANT_SOURCE_FILES]`.\n    *   Provide a brief explanation before or after each diagram to give context.\n    *   CRITICAL: All diagrams MUST follow strict vertical orientation:\n       - Use "graph TD" (top-down) directive for flow diagrams\n       - NEVER use "graph LR" (left-right)\n       - Maximum node width should be 3-4 words\n       - For sequence diagrams:\n         - Start with "sequenceDiagram" directive on its own line\n         - Define ALL participants at the beginning\n         - Use descriptive but concise participant names\n         - Use the correct arrow types:\n           - ->> for request/asynchronous messages\n           - -->> for response messages\n           - -x for failed messages\n         - Include activation boxes using +/- notation\n         - Add notes for clarification using "Note over" or "Note right of"\n\n4.  **Tables:**\n    *   Use Markdown tables to summarize information such as:\n        *   Key features or components and their descriptions.\n        *   API endpoint parameters, types, and descriptions.\n        *   Configuration options, their types, and default values.\n        *   Data model fields, types, constraints, and descriptions.\n\n5.  **Code Snippets:**\n    *   Include short, relevant code snippets (e.g., Python, Java, JavaScript, SQL, JSON, YAML) directly from the `[RELEVANT_SOURCE_FILES]` to illustrate key implementation details, data structures, or configurations.\n    *   Ensure snippets are well-formatted within Markdown code blocks with appropriate language identifiers.\n\n6.  **Source Citations (EXTREMELY IMPORTANT):**\n    *   For EVERY piece of significant information, explanation, diagram, table entry, or code snippet, you MUST cite the specific source file(s) and relevant line numbers from which the information was derived.\n    *   Place citations at the end of the paragraph, under the diagram/table, or after the code snippet.\n    *   Use the exact format: `Sources: [filename.ext:start_line-end_line]()` for a range, or `Sources: [filename.ext:line_number]()` for a single line. Multiple files can be cited: `Sources: [file1.ext:1-10](), [file2.ext:5](), [dir/file3.ext]()` (if the whole file is relevant and line numbers are not applicable or too broad).\n    *   If an entire section is overwhelmingly based on one or two files, you can cite them under the section heading in addition to more specific citations within the section.\n    *   IMPORTANT: You MUST cite AT LEAST 5 different source files throughout the wiki page to ensure comprehensive coverage.\n\n7.  **Technical Accuracy:** All information must be derived SOLELY from the `[RELEVANT_SOURCE_FILES]`. Do not infer, invent, or use external knowledge about similar systems or common practices unless it\'s directly supported by the provided code. If information is not present in the provided files, do not include it or explicitly state its absence if crucial to the topic.\n\n8.  **Clarity and Conciseness:** Use clear, professional, and concise technical language suitable for other developers working on or learning about the project. Avoid unnecessary jargon, but use correct technical terms where appropriate.\n\n9.  **Conclusion/Summary:** End with a brief summary paragraph if appropriate for "Key Features", reiterating the key aspects covered and their significance within the project.\n\nIMPORTANT: Generate the content in English language.\n\nRemember:\n- Ground every claim in the provided source files.\n- Prioritize accuracy and direct representation of the code\'s functionality and structure.\n- Structure the document logically for easy understanding by other developers.\n']}
2025-07-02 16:29:44,680 - INFO - api.websocket_wiki - websocket_wiki.py:211 - Retrieved 18 documents
2025-07-02 16:29:44,681 - INFO - api.rag - rag.py:73 - Dialog turns list exists but is empty
2025-07-02 16:29:44,681 - INFO - api.rag - rag.py:87 - Returning 0 dialog turns from memory
2025-07-02 16:29:44,681 - INFO - api.websocket_wiki - websocket_wiki.py:483 - Using Openai protocol with model: gpt-4o-mini
2025-07-02 16:29:44,695 - INFO - api.websocket_wiki - websocket_wiki.py:566 - Making Openai API call
2025-07-02 16:30:00,616 - INFO - api.websocket_wiki - websocket_wiki.py:79 - Request size: 1341 tokens
2025-07-02 16:30:00,627 - INFO - adalflow.core.prompt_builder - prompt_builder.py:74 - Prompt has variables: ['schema']
2025-07-02 16:30:00,628 - INFO - adalflow.core.prompt_builder - prompt_builder.py:74 - Prompt has variables: ['schema']
2025-07-02 16:30:00,628 - INFO - api.rag - rag.py:73 - Dialog turns list exists but is empty
2025-07-02 16:30:00,628 - INFO - api.rag - rag.py:87 - Returning 0 dialog turns from memory
2025-07-02 16:30:00,644 - INFO - adalflow.optim.grad_component - grad_component.py:79 - EvalFnToTextLoss: No backward engine provided. Creating one using model_client and model_kwargs.
2025-07-02 16:30:00,647 - INFO - adalflow.core.prompt_builder - prompt_builder.py:74 - Prompt has variables: ['contexts', 'system_prompt', 'conversation_history', 'output_format_str', 'input_str']
2025-07-02 16:30:00,647 - INFO - adalflow.core.generator - generator.py:180 - Generator Generator initialized.
2025-07-02 16:30:00,647 - INFO - api.data_pipeline - data_pipeline.py:705 - Preparing repo storage for https://github.com/niranjandasMM/LLM_agents/...
2025-07-02 16:30:00,647 - INFO - api.data_pipeline - data_pipeline.py:715 - Extracted repo name: niranjandasMM_LLM_agents
2025-07-02 16:30:00,647 - INFO - api.data_pipeline - data_pipeline.py:724 - Repository already exists at /Users/niranjanadas_m/.adalflow/repos/niranjandasMM_LLM_agents. Using existing repository.
2025-07-02 16:30:00,647 - INFO - api.data_pipeline - data_pipeline.py:738 - Repo paths: {'save_repo_dir': '/Users/niranjanadas_m/.adalflow/repos/niranjandasMM_LLM_agents', 'save_db_file': '/Users/niranjanadas_m/.adalflow/databases/niranjandasMM_LLM_agents.pkl'}
2025-07-02 16:30:00,647 - INFO - api.data_pipeline - data_pipeline.py:762 - Loading existing database...
2025-07-02 16:30:00,649 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict TextSplitter, {'type': 'TextSplitter', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'TextSplitter', '_init_args': {'split_by': 'word', 'chunk_size': 800, 'chunk_overlap': 200, 'batch_size': 1000, 'separators': {'page': '\x0c', 'passage': '\n\n', 'word': ' ', 'sentence': '.', 'token': ''}}, 'split_by': 'word', 'separators': {'page': '\x0c', 'passage': '\n\n', 'word': ' ', 'sentence': '.', 'token': ''}, 'chunk_size': 350, 'chunk_overlap': 100, 'batch_size': 1000}}
2025-07-02 16:30:00,649 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict ToEmbeddings, {'type': 'ToEmbeddings', 'data': {'_components': {'_ordered_dict': True, 'data': [('embedder', {'type': 'Embedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('model_client', {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'Embedder', '_init_args': {'model_client': None, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}}), ('batch_embedder', {'type': 'BatchEmbedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('embedder', {'type': 'Embedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('model_client', {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'Embedder', '_init_args': {'model_client': None, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'BatchEmbedder', '_init_args': {'embedder': None, 'batch_size': 500}, 'batch_size': 500}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'ToEmbeddings', '_init_args': {'embedder': None, 'batch_size': 500}, 'batch_size': 500}}
2025-07-02 16:30:00,651 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict Embedder, {'type': 'Embedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('model_client', {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'Embedder', '_init_args': {'model_client': None, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}}
2025-07-02 16:30:00,651 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict OpenAIClient, {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}}
2025-07-02 16:30:00,674 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict BatchEmbedder, {'type': 'BatchEmbedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('embedder', {'type': 'Embedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('model_client', {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'Embedder', '_init_args': {'model_client': None, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'BatchEmbedder', '_init_args': {'embedder': None, 'batch_size': 500}, 'batch_size': 500}}
2025-07-02 16:30:00,675 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict Embedder, {'type': 'Embedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('model_client', {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'Embedder', '_init_args': {'model_client': None, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}}
2025-07-02 16:30:00,676 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict OpenAIClient, {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}}
2025-07-02 16:30:00,689 - INFO - api.data_pipeline - data_pipeline.py:767 - Loaded 18 documents from existing database
2025-07-02 16:30:00,689 - INFO - api.rag - rag.py:421 - Loaded 18 documents for retrieval
2025-07-02 16:30:00,689 - INFO - api.rag - rag.py:350 - Target embedding size: 256 (found in 18 documents)
2025-07-02 16:30:00,690 - INFO - api.rag - rag.py:384 - Embedding validation complete: 18/18 documents have valid embeddings
2025-07-02 16:30:00,690 - INFO - api.rag - rag.py:429 - Using 18 documents with valid embeddings for retrieval
2025-07-02 16:30:00,690 - INFO - adalflow.optim.grad_component - grad_component.py:79 - EvalFnToTextLoss: No backward engine provided. Creating one using model_client and model_kwargs.
2025-07-02 16:30:00,690 - INFO - adalflow.components.retriever.faiss_retriever - faiss_retriever.py:190 - Index built with 18 chunks
2025-07-02 16:30:00,690 - INFO - api.rag - rag.py:440 - FAISS retriever created successfully
2025-07-02 16:30:00,690 - INFO - api.websocket_wiki - websocket_wiki.py:108 - Retriever prepared for https://github.com/niranjandasMM/LLM_agents/
2025-07-02 16:30:00,690 - INFO - api.openai_client - openai_client.py:416 - api_kwargs: {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['You are an expert technical writer and software architect.\nYour task is to generate a comprehensive and accurate technical wiki page in Markdown format about a specific feature, system, or module within a given software project.\n\nYou will be given:\n1. The "[WIKI_PAGE_TOPIC]" for the page you need to create.\n2. A list of "[RELEVANT_SOURCE_FILES]" from the project that you MUST use as the sole basis for the content. You have access to the full content of these files. You MUST use AT LEAST 5 relevant source files for comprehensive coverage - if fewer are provided, search for additional related files in the codebase.\n\nCRITICAL STARTING INSTRUCTION:\nThe very first thing on the page MUST be a `<details>` block listing ALL the `[RELEVANT_SOURCE_FILES]` you used to generate the content. There MUST be AT LEAST 5 source files listed - if fewer were provided, you MUST find additional related files to include.\nFormat it exactly like this:\n<details>\n<summary>Relevant source files</summary>\n\nRemember, do not provide any acknowledgements, disclaimers, apologies, or any other preface before the `<details>` block. JUST START with the `<details>` block.\nThe following files were used as context for generating this wiki page:\n\n- [run_crewai_jira_agent.py](run_crewai_jira_agent.py)\n<!-- Add additional relevant files if fewer than 5 were provided -->\n</details>\n\nImmediately after the `<details>` block, the main title of the page should be a H1 Markdown heading: `# Data Flow and Management`.\n\nBased ONLY on the content of the `[RELEVANT_SOURCE_FILES]`:\n\n1.  **Introduction:** Start with a concise introduction (1-2 paragraphs) explaining the purpose, scope, and high-level overview of "Data Flow and Management" within the context of the overall project. If relevant, and if information is available in the provided files, link to other potential wiki pages using the format `[Link Text](#page-anchor-or-id)`.\n\n2.  **Detailed Sections:** Break down "Data Flow and Management" into logical sections using H2 (`##`) and H3 (`###`) Markdown headings. For each section:\n    *   Explain the architecture, components, data flow, or logic relevant to the section\'s focus, as evidenced in the source files.\n    *   Identify key functions, classes, data structures, API endpoints, or configuration elements pertinent to that section.\n\n3.  **Mermaid Diagrams:**\n    *   EXTENSIVELY use Mermaid diagrams (e.g., `flowchart TD`, `sequenceDiagram`, `classDiagram`, `erDiagram`, `graph TD`) to visually represent architectures, flows, relationships, and schemas found in the source files.\n    *   Ensure diagrams are accurate and directly derived from information in the `[RELEVANT_SOURCE_FILES]`.\n    *   Provide a brief explanation before or after each diagram to give context.\n    *   CRITICAL: All diagrams MUST follow strict vertical orientation:\n       - Use "graph TD" (top-down) directive for flow diagrams\n       - NEVER use "graph LR" (left-right)\n       - Maximum node width should be 3-4 words\n       - For sequence diagrams:\n         - Start with "sequenceDiagram" directive on its own line\n         - Define ALL participants at the beginning\n         - Use descriptive but concise participant names\n         - Use the correct arrow types:\n           - ->> for request/asynchronous messages\n           - -->> for response messages\n           - -x for failed messages\n         - Include activation boxes using +/- notation\n         - Add notes for clarification using "Note over" or "Note right of"\n\n4.  **Tables:**\n    *   Use Markdown tables to summarize information such as:\n        *   Key features or components and their descriptions.\n        *   API endpoint parameters, types, and descriptions.\n        *   Configuration options, their types, and default values.\n        *   Data model fields, types, constraints, and descriptions.\n\n5.  **Code Snippets:**\n    *   Include short, relevant code snippets (e.g., Python, Java, JavaScript, SQL, JSON, YAML) directly from the `[RELEVANT_SOURCE_FILES]` to illustrate key implementation details, data structures, or configurations.\n    *   Ensure snippets are well-formatted within Markdown code blocks with appropriate language identifiers.\n\n6.  **Source Citations (EXTREMELY IMPORTANT):**\n    *   For EVERY piece of significant information, explanation, diagram, table entry, or code snippet, you MUST cite the specific source file(s) and relevant line numbers from which the information was derived.\n    *   Place citations at the end of the paragraph, under the diagram/table, or after the code snippet.\n    *   Use the exact format: `Sources: [filename.ext:start_line-end_line]()` for a range, or `Sources: [filename.ext:line_number]()` for a single line. Multiple files can be cited: `Sources: [file1.ext:1-10](), [file2.ext:5](), [dir/file3.ext]()` (if the whole file is relevant and line numbers are not applicable or too broad).\n    *   If an entire section is overwhelmingly based on one or two files, you can cite them under the section heading in addition to more specific citations within the section.\n    *   IMPORTANT: You MUST cite AT LEAST 5 different source files throughout the wiki page to ensure comprehensive coverage.\n\n7.  **Technical Accuracy:** All information must be derived SOLELY from the `[RELEVANT_SOURCE_FILES]`. Do not infer, invent, or use external knowledge about similar systems or common practices unless it\'s directly supported by the provided code. If information is not present in the provided files, do not include it or explicitly state its absence if crucial to the topic.\n\n8.  **Clarity and Conciseness:** Use clear, professional, and concise technical language suitable for other developers working on or learning about the project. Avoid unnecessary jargon, but use correct technical terms where appropriate.\n\n9.  **Conclusion/Summary:** End with a brief summary paragraph if appropriate for "Data Flow and Management", reiterating the key aspects covered and their significance within the project.\n\nIMPORTANT: Generate the content in English language.\n\nRemember:\n- Ground every claim in the provided source files.\n- Prioritize accuracy and direct representation of the code\'s functionality and structure.\n- Structure the document logically for easy understanding by other developers.\n']}
2025-07-02 16:30:01,713 - INFO - api.websocket_wiki - websocket_wiki.py:211 - Retrieved 18 documents
2025-07-02 16:30:01,713 - INFO - api.rag - rag.py:73 - Dialog turns list exists but is empty
2025-07-02 16:30:01,713 - INFO - api.rag - rag.py:87 - Returning 0 dialog turns from memory
2025-07-02 16:30:01,714 - INFO - api.websocket_wiki - websocket_wiki.py:483 - Using Openai protocol with model: gpt-4o-mini
2025-07-02 16:30:01,723 - INFO - api.websocket_wiki - websocket_wiki.py:566 - Making Openai API call
2025-07-02 16:30:22,677 - INFO - api.websocket_wiki - websocket_wiki.py:79 - Request size: 1325 tokens
2025-07-02 16:30:22,691 - INFO - adalflow.core.prompt_builder - prompt_builder.py:74 - Prompt has variables: ['schema']
2025-07-02 16:30:22,692 - INFO - adalflow.core.prompt_builder - prompt_builder.py:74 - Prompt has variables: ['schema']
2025-07-02 16:30:22,692 - INFO - api.rag - rag.py:73 - Dialog turns list exists but is empty
2025-07-02 16:30:22,692 - INFO - api.rag - rag.py:87 - Returning 0 dialog turns from memory
2025-07-02 16:30:22,708 - INFO - adalflow.optim.grad_component - grad_component.py:79 - EvalFnToTextLoss: No backward engine provided. Creating one using model_client and model_kwargs.
2025-07-02 16:30:22,712 - INFO - adalflow.core.prompt_builder - prompt_builder.py:74 - Prompt has variables: ['contexts', 'system_prompt', 'conversation_history', 'output_format_str', 'input_str']
2025-07-02 16:30:22,712 - INFO - adalflow.core.generator - generator.py:180 - Generator Generator initialized.
2025-07-02 16:30:22,712 - INFO - api.data_pipeline - data_pipeline.py:705 - Preparing repo storage for https://github.com/niranjandasMM/LLM_agents/...
2025-07-02 16:30:22,712 - INFO - api.data_pipeline - data_pipeline.py:715 - Extracted repo name: niranjandasMM_LLM_agents
2025-07-02 16:30:22,712 - INFO - api.data_pipeline - data_pipeline.py:724 - Repository already exists at /Users/niranjanadas_m/.adalflow/repos/niranjandasMM_LLM_agents. Using existing repository.
2025-07-02 16:30:22,712 - INFO - api.data_pipeline - data_pipeline.py:738 - Repo paths: {'save_repo_dir': '/Users/niranjanadas_m/.adalflow/repos/niranjandasMM_LLM_agents', 'save_db_file': '/Users/niranjanadas_m/.adalflow/databases/niranjandasMM_LLM_agents.pkl'}
2025-07-02 16:30:22,712 - INFO - api.data_pipeline - data_pipeline.py:762 - Loading existing database...
2025-07-02 16:30:22,713 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict TextSplitter, {'type': 'TextSplitter', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'TextSplitter', '_init_args': {'split_by': 'word', 'chunk_size': 800, 'chunk_overlap': 200, 'batch_size': 1000, 'separators': {'page': '\x0c', 'passage': '\n\n', 'word': ' ', 'sentence': '.', 'token': ''}}, 'split_by': 'word', 'separators': {'page': '\x0c', 'passage': '\n\n', 'word': ' ', 'sentence': '.', 'token': ''}, 'chunk_size': 350, 'chunk_overlap': 100, 'batch_size': 1000}}
2025-07-02 16:30:22,714 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict ToEmbeddings, {'type': 'ToEmbeddings', 'data': {'_components': {'_ordered_dict': True, 'data': [('embedder', {'type': 'Embedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('model_client', {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'Embedder', '_init_args': {'model_client': None, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}}), ('batch_embedder', {'type': 'BatchEmbedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('embedder', {'type': 'Embedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('model_client', {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'Embedder', '_init_args': {'model_client': None, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'BatchEmbedder', '_init_args': {'embedder': None, 'batch_size': 500}, 'batch_size': 500}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'ToEmbeddings', '_init_args': {'embedder': None, 'batch_size': 500}, 'batch_size': 500}}
2025-07-02 16:30:22,716 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict Embedder, {'type': 'Embedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('model_client', {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'Embedder', '_init_args': {'model_client': None, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}}
2025-07-02 16:30:22,717 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict OpenAIClient, {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}}
2025-07-02 16:30:22,747 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict BatchEmbedder, {'type': 'BatchEmbedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('embedder', {'type': 'Embedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('model_client', {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'Embedder', '_init_args': {'model_client': None, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'BatchEmbedder', '_init_args': {'embedder': None, 'batch_size': 500}, 'batch_size': 500}}
2025-07-02 16:30:22,750 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict Embedder, {'type': 'Embedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('model_client', {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'Embedder', '_init_args': {'model_client': None, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}}
2025-07-02 16:30:22,751 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict OpenAIClient, {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}}
2025-07-02 16:30:22,765 - INFO - api.data_pipeline - data_pipeline.py:767 - Loaded 18 documents from existing database
2025-07-02 16:30:22,765 - INFO - api.rag - rag.py:421 - Loaded 18 documents for retrieval
2025-07-02 16:30:22,765 - INFO - api.rag - rag.py:350 - Target embedding size: 256 (found in 18 documents)
2025-07-02 16:30:22,765 - INFO - api.rag - rag.py:384 - Embedding validation complete: 18/18 documents have valid embeddings
2025-07-02 16:30:22,765 - INFO - api.rag - rag.py:429 - Using 18 documents with valid embeddings for retrieval
2025-07-02 16:30:22,765 - INFO - adalflow.optim.grad_component - grad_component.py:79 - EvalFnToTextLoss: No backward engine provided. Creating one using model_client and model_kwargs.
2025-07-02 16:30:22,766 - INFO - adalflow.components.retriever.faiss_retriever - faiss_retriever.py:190 - Index built with 18 chunks
2025-07-02 16:30:22,766 - INFO - api.rag - rag.py:440 - FAISS retriever created successfully
2025-07-02 16:30:22,766 - INFO - api.websocket_wiki - websocket_wiki.py:108 - Retriever prepared for https://github.com/niranjandasMM/LLM_agents/
2025-07-02 16:30:22,766 - INFO - api.openai_client - openai_client.py:416 - api_kwargs: {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['You are an expert technical writer and software architect.\nYour task is to generate a comprehensive and accurate technical wiki page in Markdown format about a specific feature, system, or module within a given software project.\n\nYou will be given:\n1. The "[WIKI_PAGE_TOPIC]" for the page you need to create.\n2. A list of "[RELEVANT_SOURCE_FILES]" from the project that you MUST use as the sole basis for the content. You have access to the full content of these files. You MUST use AT LEAST 5 relevant source files for comprehensive coverage - if fewer are provided, search for additional related files in the codebase.\n\nCRITICAL STARTING INSTRUCTION:\nThe very first thing on the page MUST be a `<details>` block listing ALL the `[RELEVANT_SOURCE_FILES]` you used to generate the content. There MUST be AT LEAST 5 source files listed - if fewer were provided, you MUST find additional related files to include.\nFormat it exactly like this:\n<details>\n<summary>Relevant source files</summary>\n\nRemember, do not provide any acknowledgements, disclaimers, apologies, or any other preface before the `<details>` block. JUST START with the `<details>` block.\nThe following files were used as context for generating this wiki page:\n\n- [jira_tools.py](jira_tools.py)\n<!-- Add additional relevant files if fewer than 5 were provided -->\n</details>\n\nImmediately after the `<details>` block, the main title of the page should be a H1 Markdown heading: `# Backend Architecture`.\n\nBased ONLY on the content of the `[RELEVANT_SOURCE_FILES]`:\n\n1.  **Introduction:** Start with a concise introduction (1-2 paragraphs) explaining the purpose, scope, and high-level overview of "Backend Architecture" within the context of the overall project. If relevant, and if information is available in the provided files, link to other potential wiki pages using the format `[Link Text](#page-anchor-or-id)`.\n\n2.  **Detailed Sections:** Break down "Backend Architecture" into logical sections using H2 (`##`) and H3 (`###`) Markdown headings. For each section:\n    *   Explain the architecture, components, data flow, or logic relevant to the section\'s focus, as evidenced in the source files.\n    *   Identify key functions, classes, data structures, API endpoints, or configuration elements pertinent to that section.\n\n3.  **Mermaid Diagrams:**\n    *   EXTENSIVELY use Mermaid diagrams (e.g., `flowchart TD`, `sequenceDiagram`, `classDiagram`, `erDiagram`, `graph TD`) to visually represent architectures, flows, relationships, and schemas found in the source files.\n    *   Ensure diagrams are accurate and directly derived from information in the `[RELEVANT_SOURCE_FILES]`.\n    *   Provide a brief explanation before or after each diagram to give context.\n    *   CRITICAL: All diagrams MUST follow strict vertical orientation:\n       - Use "graph TD" (top-down) directive for flow diagrams\n       - NEVER use "graph LR" (left-right)\n       - Maximum node width should be 3-4 words\n       - For sequence diagrams:\n         - Start with "sequenceDiagram" directive on its own line\n         - Define ALL participants at the beginning\n         - Use descriptive but concise participant names\n         - Use the correct arrow types:\n           - ->> for request/asynchronous messages\n           - -->> for response messages\n           - -x for failed messages\n         - Include activation boxes using +/- notation\n         - Add notes for clarification using "Note over" or "Note right of"\n\n4.  **Tables:**\n    *   Use Markdown tables to summarize information such as:\n        *   Key features or components and their descriptions.\n        *   API endpoint parameters, types, and descriptions.\n        *   Configuration options, their types, and default values.\n        *   Data model fields, types, constraints, and descriptions.\n\n5.  **Code Snippets:**\n    *   Include short, relevant code snippets (e.g., Python, Java, JavaScript, SQL, JSON, YAML) directly from the `[RELEVANT_SOURCE_FILES]` to illustrate key implementation details, data structures, or configurations.\n    *   Ensure snippets are well-formatted within Markdown code blocks with appropriate language identifiers.\n\n6.  **Source Citations (EXTREMELY IMPORTANT):**\n    *   For EVERY piece of significant information, explanation, diagram, table entry, or code snippet, you MUST cite the specific source file(s) and relevant line numbers from which the information was derived.\n    *   Place citations at the end of the paragraph, under the diagram/table, or after the code snippet.\n    *   Use the exact format: `Sources: [filename.ext:start_line-end_line]()` for a range, or `Sources: [filename.ext:line_number]()` for a single line. Multiple files can be cited: `Sources: [file1.ext:1-10](), [file2.ext:5](), [dir/file3.ext]()` (if the whole file is relevant and line numbers are not applicable or too broad).\n    *   If an entire section is overwhelmingly based on one or two files, you can cite them under the section heading in addition to more specific citations within the section.\n    *   IMPORTANT: You MUST cite AT LEAST 5 different source files throughout the wiki page to ensure comprehensive coverage.\n\n7.  **Technical Accuracy:** All information must be derived SOLELY from the `[RELEVANT_SOURCE_FILES]`. Do not infer, invent, or use external knowledge about similar systems or common practices unless it\'s directly supported by the provided code. If information is not present in the provided files, do not include it or explicitly state its absence if crucial to the topic.\n\n8.  **Clarity and Conciseness:** Use clear, professional, and concise technical language suitable for other developers working on or learning about the project. Avoid unnecessary jargon, but use correct technical terms where appropriate.\n\n9.  **Conclusion/Summary:** End with a brief summary paragraph if appropriate for "Backend Architecture", reiterating the key aspects covered and their significance within the project.\n\nIMPORTANT: Generate the content in English language.\n\nRemember:\n- Ground every claim in the provided source files.\n- Prioritize accuracy and direct representation of the code\'s functionality and structure.\n- Structure the document logically for easy understanding by other developers.\n']}
2025-07-02 16:30:23,330 - INFO - api.websocket_wiki - websocket_wiki.py:211 - Retrieved 18 documents
2025-07-02 16:30:23,331 - INFO - api.rag - rag.py:73 - Dialog turns list exists but is empty
2025-07-02 16:30:23,331 - INFO - api.rag - rag.py:87 - Returning 0 dialog turns from memory
2025-07-02 16:30:23,331 - INFO - api.websocket_wiki - websocket_wiki.py:483 - Using Openai protocol with model: gpt-4o-mini
2025-07-02 16:30:23,349 - INFO - api.websocket_wiki - websocket_wiki.py:566 - Making Openai API call
2025-07-02 16:30:36,347 - INFO - api.websocket_wiki - websocket_wiki.py:79 - Request size: 1333 tokens
2025-07-02 16:30:36,360 - INFO - adalflow.core.prompt_builder - prompt_builder.py:74 - Prompt has variables: ['schema']
2025-07-02 16:30:36,361 - INFO - adalflow.core.prompt_builder - prompt_builder.py:74 - Prompt has variables: ['schema']
2025-07-02 16:30:36,361 - INFO - api.rag - rag.py:73 - Dialog turns list exists but is empty
2025-07-02 16:30:36,361 - INFO - api.rag - rag.py:87 - Returning 0 dialog turns from memory
2025-07-02 16:30:36,376 - INFO - adalflow.optim.grad_component - grad_component.py:79 - EvalFnToTextLoss: No backward engine provided. Creating one using model_client and model_kwargs.
2025-07-02 16:30:36,380 - INFO - adalflow.core.prompt_builder - prompt_builder.py:74 - Prompt has variables: ['contexts', 'system_prompt', 'conversation_history', 'output_format_str', 'input_str']
2025-07-02 16:30:36,380 - INFO - adalflow.core.generator - generator.py:180 - Generator Generator initialized.
2025-07-02 16:30:36,380 - INFO - api.data_pipeline - data_pipeline.py:705 - Preparing repo storage for https://github.com/niranjandasMM/LLM_agents/...
2025-07-02 16:30:36,380 - INFO - api.data_pipeline - data_pipeline.py:715 - Extracted repo name: niranjandasMM_LLM_agents
2025-07-02 16:30:36,381 - INFO - api.data_pipeline - data_pipeline.py:724 - Repository already exists at /Users/niranjanadas_m/.adalflow/repos/niranjandasMM_LLM_agents. Using existing repository.
2025-07-02 16:30:36,381 - INFO - api.data_pipeline - data_pipeline.py:738 - Repo paths: {'save_repo_dir': '/Users/niranjanadas_m/.adalflow/repos/niranjandasMM_LLM_agents', 'save_db_file': '/Users/niranjanadas_m/.adalflow/databases/niranjandasMM_LLM_agents.pkl'}
2025-07-02 16:30:36,381 - INFO - api.data_pipeline - data_pipeline.py:762 - Loading existing database...
2025-07-02 16:30:36,383 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict TextSplitter, {'type': 'TextSplitter', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'TextSplitter', '_init_args': {'split_by': 'word', 'chunk_size': 800, 'chunk_overlap': 200, 'batch_size': 1000, 'separators': {'page': '\x0c', 'passage': '\n\n', 'word': ' ', 'sentence': '.', 'token': ''}}, 'split_by': 'word', 'separators': {'page': '\x0c', 'passage': '\n\n', 'word': ' ', 'sentence': '.', 'token': ''}, 'chunk_size': 350, 'chunk_overlap': 100, 'batch_size': 1000}}
2025-07-02 16:30:36,383 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict ToEmbeddings, {'type': 'ToEmbeddings', 'data': {'_components': {'_ordered_dict': True, 'data': [('embedder', {'type': 'Embedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('model_client', {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'Embedder', '_init_args': {'model_client': None, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}}), ('batch_embedder', {'type': 'BatchEmbedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('embedder', {'type': 'Embedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('model_client', {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'Embedder', '_init_args': {'model_client': None, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'BatchEmbedder', '_init_args': {'embedder': None, 'batch_size': 500}, 'batch_size': 500}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'ToEmbeddings', '_init_args': {'embedder': None, 'batch_size': 500}, 'batch_size': 500}}
2025-07-02 16:30:36,385 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict Embedder, {'type': 'Embedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('model_client', {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'Embedder', '_init_args': {'model_client': None, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}}
2025-07-02 16:30:36,386 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict OpenAIClient, {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}}
2025-07-02 16:30:36,409 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict BatchEmbedder, {'type': 'BatchEmbedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('embedder', {'type': 'Embedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('model_client', {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'Embedder', '_init_args': {'model_client': None, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'BatchEmbedder', '_init_args': {'embedder': None, 'batch_size': 500}, 'batch_size': 500}}
2025-07-02 16:30:36,409 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict Embedder, {'type': 'Embedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('model_client', {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'Embedder', '_init_args': {'model_client': None, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}}
2025-07-02 16:30:36,411 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict OpenAIClient, {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}}
2025-07-02 16:30:36,425 - INFO - api.data_pipeline - data_pipeline.py:767 - Loaded 18 documents from existing database
2025-07-02 16:30:36,425 - INFO - api.rag - rag.py:421 - Loaded 18 documents for retrieval
2025-07-02 16:30:36,425 - INFO - api.rag - rag.py:350 - Target embedding size: 256 (found in 18 documents)
2025-07-02 16:30:36,425 - INFO - api.rag - rag.py:384 - Embedding validation complete: 18/18 documents have valid embeddings
2025-07-02 16:30:36,425 - INFO - api.rag - rag.py:429 - Using 18 documents with valid embeddings for retrieval
2025-07-02 16:30:36,425 - INFO - adalflow.optim.grad_component - grad_component.py:79 - EvalFnToTextLoss: No backward engine provided. Creating one using model_client and model_kwargs.
2025-07-02 16:30:36,425 - INFO - adalflow.components.retriever.faiss_retriever - faiss_retriever.py:190 - Index built with 18 chunks
2025-07-02 16:30:36,425 - INFO - api.rag - rag.py:440 - FAISS retriever created successfully
2025-07-02 16:30:36,425 - INFO - api.websocket_wiki - websocket_wiki.py:108 - Retriever prepared for https://github.com/niranjandasMM/LLM_agents/
2025-07-02 16:30:36,426 - INFO - api.openai_client - openai_client.py:416 - api_kwargs: {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['You are an expert technical writer and software architect.\nYour task is to generate a comprehensive and accurate technical wiki page in Markdown format about a specific feature, system, or module within a given software project.\n\nYou will be given:\n1. The "[WIKI_PAGE_TOPIC]" for the page you need to create.\n2. A list of "[RELEVANT_SOURCE_FILES]" from the project that you MUST use as the sole basis for the content. You have access to the full content of these files. You MUST use AT LEAST 5 relevant source files for comprehensive coverage - if fewer are provided, search for additional related files in the codebase.\n\nCRITICAL STARTING INSTRUCTION:\nThe very first thing on the page MUST be a `<details>` block listing ALL the `[RELEVANT_SOURCE_FILES]` you used to generate the content. There MUST be AT LEAST 5 source files listed - if fewer were provided, you MUST find additional related files to include.\nFormat it exactly like this:\n<details>\n<summary>Relevant source files</summary>\n\nRemember, do not provide any acknowledgements, disclaimers, apologies, or any other preface before the `<details>` block. JUST START with the `<details>` block.\nThe following files were used as context for generating this wiki page:\n\n- [run_crewai_jira_agent.py](run_crewai_jira_agent.py)\n<!-- Add additional relevant files if fewer than 5 were provided -->\n</details>\n\nImmediately after the `<details>` block, the main title of the page should be a H1 Markdown heading: `# Model Integration`.\n\nBased ONLY on the content of the `[RELEVANT_SOURCE_FILES]`:\n\n1.  **Introduction:** Start with a concise introduction (1-2 paragraphs) explaining the purpose, scope, and high-level overview of "Model Integration" within the context of the overall project. If relevant, and if information is available in the provided files, link to other potential wiki pages using the format `[Link Text](#page-anchor-or-id)`.\n\n2.  **Detailed Sections:** Break down "Model Integration" into logical sections using H2 (`##`) and H3 (`###`) Markdown headings. For each section:\n    *   Explain the architecture, components, data flow, or logic relevant to the section\'s focus, as evidenced in the source files.\n    *   Identify key functions, classes, data structures, API endpoints, or configuration elements pertinent to that section.\n\n3.  **Mermaid Diagrams:**\n    *   EXTENSIVELY use Mermaid diagrams (e.g., `flowchart TD`, `sequenceDiagram`, `classDiagram`, `erDiagram`, `graph TD`) to visually represent architectures, flows, relationships, and schemas found in the source files.\n    *   Ensure diagrams are accurate and directly derived from information in the `[RELEVANT_SOURCE_FILES]`.\n    *   Provide a brief explanation before or after each diagram to give context.\n    *   CRITICAL: All diagrams MUST follow strict vertical orientation:\n       - Use "graph TD" (top-down) directive for flow diagrams\n       - NEVER use "graph LR" (left-right)\n       - Maximum node width should be 3-4 words\n       - For sequence diagrams:\n         - Start with "sequenceDiagram" directive on its own line\n         - Define ALL participants at the beginning\n         - Use descriptive but concise participant names\n         - Use the correct arrow types:\n           - ->> for request/asynchronous messages\n           - -->> for response messages\n           - -x for failed messages\n         - Include activation boxes using +/- notation\n         - Add notes for clarification using "Note over" or "Note right of"\n\n4.  **Tables:**\n    *   Use Markdown tables to summarize information such as:\n        *   Key features or components and their descriptions.\n        *   API endpoint parameters, types, and descriptions.\n        *   Configuration options, their types, and default values.\n        *   Data model fields, types, constraints, and descriptions.\n\n5.  **Code Snippets:**\n    *   Include short, relevant code snippets (e.g., Python, Java, JavaScript, SQL, JSON, YAML) directly from the `[RELEVANT_SOURCE_FILES]` to illustrate key implementation details, data structures, or configurations.\n    *   Ensure snippets are well-formatted within Markdown code blocks with appropriate language identifiers.\n\n6.  **Source Citations (EXTREMELY IMPORTANT):**\n    *   For EVERY piece of significant information, explanation, diagram, table entry, or code snippet, you MUST cite the specific source file(s) and relevant line numbers from which the information was derived.\n    *   Place citations at the end of the paragraph, under the diagram/table, or after the code snippet.\n    *   Use the exact format: `Sources: [filename.ext:start_line-end_line]()` for a range, or `Sources: [filename.ext:line_number]()` for a single line. Multiple files can be cited: `Sources: [file1.ext:1-10](), [file2.ext:5](), [dir/file3.ext]()` (if the whole file is relevant and line numbers are not applicable or too broad).\n    *   If an entire section is overwhelmingly based on one or two files, you can cite them under the section heading in addition to more specific citations within the section.\n    *   IMPORTANT: You MUST cite AT LEAST 5 different source files throughout the wiki page to ensure comprehensive coverage.\n\n7.  **Technical Accuracy:** All information must be derived SOLELY from the `[RELEVANT_SOURCE_FILES]`. Do not infer, invent, or use external knowledge about similar systems or common practices unless it\'s directly supported by the provided code. If information is not present in the provided files, do not include it or explicitly state its absence if crucial to the topic.\n\n8.  **Clarity and Conciseness:** Use clear, professional, and concise technical language suitable for other developers working on or learning about the project. Avoid unnecessary jargon, but use correct technical terms where appropriate.\n\n9.  **Conclusion/Summary:** End with a brief summary paragraph if appropriate for "Model Integration", reiterating the key aspects covered and their significance within the project.\n\nIMPORTANT: Generate the content in English language.\n\nRemember:\n- Ground every claim in the provided source files.\n- Prioritize accuracy and direct representation of the code\'s functionality and structure.\n- Structure the document logically for easy understanding by other developers.\n']}
2025-07-02 16:30:37,255 - INFO - api.websocket_wiki - websocket_wiki.py:211 - Retrieved 18 documents
2025-07-02 16:30:37,256 - INFO - api.rag - rag.py:73 - Dialog turns list exists but is empty
2025-07-02 16:30:37,256 - INFO - api.rag - rag.py:87 - Returning 0 dialog turns from memory
2025-07-02 16:30:37,256 - INFO - api.websocket_wiki - websocket_wiki.py:483 - Using Openai protocol with model: gpt-4o-mini
2025-07-02 16:30:37,271 - INFO - api.websocket_wiki - websocket_wiki.py:566 - Making Openai API call
2025-07-02 16:30:48,905 - INFO - api.websocket_wiki - websocket_wiki.py:79 - Request size: 1323 tokens
2025-07-02 16:30:48,916 - INFO - adalflow.core.prompt_builder - prompt_builder.py:74 - Prompt has variables: ['schema']
2025-07-02 16:30:48,917 - INFO - adalflow.core.prompt_builder - prompt_builder.py:74 - Prompt has variables: ['schema']
2025-07-02 16:30:48,917 - INFO - api.rag - rag.py:73 - Dialog turns list exists but is empty
2025-07-02 16:30:48,917 - INFO - api.rag - rag.py:87 - Returning 0 dialog turns from memory
2025-07-02 16:30:48,935 - INFO - adalflow.optim.grad_component - grad_component.py:79 - EvalFnToTextLoss: No backward engine provided. Creating one using model_client and model_kwargs.
2025-07-02 16:30:48,939 - INFO - adalflow.core.prompt_builder - prompt_builder.py:74 - Prompt has variables: ['contexts', 'system_prompt', 'conversation_history', 'output_format_str', 'input_str']
2025-07-02 16:30:48,939 - INFO - adalflow.core.generator - generator.py:180 - Generator Generator initialized.
2025-07-02 16:30:48,939 - INFO - api.data_pipeline - data_pipeline.py:705 - Preparing repo storage for https://github.com/niranjandasMM/LLM_agents/...
2025-07-02 16:30:48,939 - INFO - api.data_pipeline - data_pipeline.py:715 - Extracted repo name: niranjandasMM_LLM_agents
2025-07-02 16:30:48,939 - INFO - api.data_pipeline - data_pipeline.py:724 - Repository already exists at /Users/niranjanadas_m/.adalflow/repos/niranjandasMM_LLM_agents. Using existing repository.
2025-07-02 16:30:48,939 - INFO - api.data_pipeline - data_pipeline.py:738 - Repo paths: {'save_repo_dir': '/Users/niranjanadas_m/.adalflow/repos/niranjandasMM_LLM_agents', 'save_db_file': '/Users/niranjanadas_m/.adalflow/databases/niranjandasMM_LLM_agents.pkl'}
2025-07-02 16:30:48,939 - INFO - api.data_pipeline - data_pipeline.py:762 - Loading existing database...
2025-07-02 16:30:48,941 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict TextSplitter, {'type': 'TextSplitter', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'TextSplitter', '_init_args': {'split_by': 'word', 'chunk_size': 800, 'chunk_overlap': 200, 'batch_size': 1000, 'separators': {'page': '\x0c', 'passage': '\n\n', 'word': ' ', 'sentence': '.', 'token': ''}}, 'split_by': 'word', 'separators': {'page': '\x0c', 'passage': '\n\n', 'word': ' ', 'sentence': '.', 'token': ''}, 'chunk_size': 350, 'chunk_overlap': 100, 'batch_size': 1000}}
2025-07-02 16:30:48,941 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict ToEmbeddings, {'type': 'ToEmbeddings', 'data': {'_components': {'_ordered_dict': True, 'data': [('embedder', {'type': 'Embedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('model_client', {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'Embedder', '_init_args': {'model_client': None, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}}), ('batch_embedder', {'type': 'BatchEmbedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('embedder', {'type': 'Embedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('model_client', {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'Embedder', '_init_args': {'model_client': None, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'BatchEmbedder', '_init_args': {'embedder': None, 'batch_size': 500}, 'batch_size': 500}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'ToEmbeddings', '_init_args': {'embedder': None, 'batch_size': 500}, 'batch_size': 500}}
2025-07-02 16:30:48,944 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict Embedder, {'type': 'Embedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('model_client', {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'Embedder', '_init_args': {'model_client': None, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}}
2025-07-02 16:30:48,945 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict OpenAIClient, {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}}
2025-07-02 16:30:48,966 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict BatchEmbedder, {'type': 'BatchEmbedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('embedder', {'type': 'Embedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('model_client', {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'Embedder', '_init_args': {'model_client': None, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'BatchEmbedder', '_init_args': {'embedder': None, 'batch_size': 500}, 'batch_size': 500}}
2025-07-02 16:30:48,966 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict Embedder, {'type': 'Embedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('model_client', {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'Embedder', '_init_args': {'model_client': None, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}}
2025-07-02 16:30:48,967 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict OpenAIClient, {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}}
2025-07-02 16:30:48,980 - INFO - api.data_pipeline - data_pipeline.py:767 - Loaded 18 documents from existing database
2025-07-02 16:30:48,980 - INFO - api.rag - rag.py:421 - Loaded 18 documents for retrieval
2025-07-02 16:30:48,980 - INFO - api.rag - rag.py:350 - Target embedding size: 256 (found in 18 documents)
2025-07-02 16:30:48,980 - INFO - api.rag - rag.py:384 - Embedding validation complete: 18/18 documents have valid embeddings
2025-07-02 16:30:48,980 - INFO - api.rag - rag.py:429 - Using 18 documents with valid embeddings for retrieval
2025-07-02 16:30:48,980 - INFO - adalflow.optim.grad_component - grad_component.py:79 - EvalFnToTextLoss: No backward engine provided. Creating one using model_client and model_kwargs.
2025-07-02 16:30:48,981 - INFO - adalflow.components.retriever.faiss_retriever - faiss_retriever.py:190 - Index built with 18 chunks
2025-07-02 16:30:48,981 - INFO - api.rag - rag.py:440 - FAISS retriever created successfully
2025-07-02 16:30:48,981 - INFO - api.websocket_wiki - websocket_wiki.py:108 - Retriever prepared for https://github.com/niranjandasMM/LLM_agents/
2025-07-02 16:30:48,981 - INFO - api.openai_client - openai_client.py:416 - api_kwargs: {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['You are an expert technical writer and software architect.\nYour task is to generate a comprehensive and accurate technical wiki page in Markdown format about a specific feature, system, or module within a given software project.\n\nYou will be given:\n1. The "[WIKI_PAGE_TOPIC]" for the page you need to create.\n2. A list of "[RELEVANT_SOURCE_FILES]" from the project that you MUST use as the sole basis for the content. You have access to the full content of these files. You MUST use AT LEAST 5 relevant source files for comprehensive coverage - if fewer are provided, search for additional related files in the codebase.\n\nCRITICAL STARTING INSTRUCTION:\nThe very first thing on the page MUST be a `<details>` block listing ALL the `[RELEVANT_SOURCE_FILES]` you used to generate the content. There MUST be AT LEAST 5 source files listed - if fewer were provided, you MUST find additional related files to include.\nFormat it exactly like this:\n<details>\n<summary>Relevant source files</summary>\n\nRemember, do not provide any acknowledgements, disclaimers, apologies, or any other preface before the `<details>` block. JUST START with the `<details>` block.\nThe following files were used as context for generating this wiki page:\n\n- [readme.md](readme.md)\n<!-- Add additional relevant files if fewer than 5 were provided -->\n</details>\n\nImmediately after the `<details>` block, the main title of the page should be a H1 Markdown heading: `# Deployment Guide`.\n\nBased ONLY on the content of the `[RELEVANT_SOURCE_FILES]`:\n\n1.  **Introduction:** Start with a concise introduction (1-2 paragraphs) explaining the purpose, scope, and high-level overview of "Deployment Guide" within the context of the overall project. If relevant, and if information is available in the provided files, link to other potential wiki pages using the format `[Link Text](#page-anchor-or-id)`.\n\n2.  **Detailed Sections:** Break down "Deployment Guide" into logical sections using H2 (`##`) and H3 (`###`) Markdown headings. For each section:\n    *   Explain the architecture, components, data flow, or logic relevant to the section\'s focus, as evidenced in the source files.\n    *   Identify key functions, classes, data structures, API endpoints, or configuration elements pertinent to that section.\n\n3.  **Mermaid Diagrams:**\n    *   EXTENSIVELY use Mermaid diagrams (e.g., `flowchart TD`, `sequenceDiagram`, `classDiagram`, `erDiagram`, `graph TD`) to visually represent architectures, flows, relationships, and schemas found in the source files.\n    *   Ensure diagrams are accurate and directly derived from information in the `[RELEVANT_SOURCE_FILES]`.\n    *   Provide a brief explanation before or after each diagram to give context.\n    *   CRITICAL: All diagrams MUST follow strict vertical orientation:\n       - Use "graph TD" (top-down) directive for flow diagrams\n       - NEVER use "graph LR" (left-right)\n       - Maximum node width should be 3-4 words\n       - For sequence diagrams:\n         - Start with "sequenceDiagram" directive on its own line\n         - Define ALL participants at the beginning\n         - Use descriptive but concise participant names\n         - Use the correct arrow types:\n           - ->> for request/asynchronous messages\n           - -->> for response messages\n           - -x for failed messages\n         - Include activation boxes using +/- notation\n         - Add notes for clarification using "Note over" or "Note right of"\n\n4.  **Tables:**\n    *   Use Markdown tables to summarize information such as:\n        *   Key features or components and their descriptions.\n        *   API endpoint parameters, types, and descriptions.\n        *   Configuration options, their types, and default values.\n        *   Data model fields, types, constraints, and descriptions.\n\n5.  **Code Snippets:**\n    *   Include short, relevant code snippets (e.g., Python, Java, JavaScript, SQL, JSON, YAML) directly from the `[RELEVANT_SOURCE_FILES]` to illustrate key implementation details, data structures, or configurations.\n    *   Ensure snippets are well-formatted within Markdown code blocks with appropriate language identifiers.\n\n6.  **Source Citations (EXTREMELY IMPORTANT):**\n    *   For EVERY piece of significant information, explanation, diagram, table entry, or code snippet, you MUST cite the specific source file(s) and relevant line numbers from which the information was derived.\n    *   Place citations at the end of the paragraph, under the diagram/table, or after the code snippet.\n    *   Use the exact format: `Sources: [filename.ext:start_line-end_line]()` for a range, or `Sources: [filename.ext:line_number]()` for a single line. Multiple files can be cited: `Sources: [file1.ext:1-10](), [file2.ext:5](), [dir/file3.ext]()` (if the whole file is relevant and line numbers are not applicable or too broad).\n    *   If an entire section is overwhelmingly based on one or two files, you can cite them under the section heading in addition to more specific citations within the section.\n    *   IMPORTANT: You MUST cite AT LEAST 5 different source files throughout the wiki page to ensure comprehensive coverage.\n\n7.  **Technical Accuracy:** All information must be derived SOLELY from the `[RELEVANT_SOURCE_FILES]`. Do not infer, invent, or use external knowledge about similar systems or common practices unless it\'s directly supported by the provided code. If information is not present in the provided files, do not include it or explicitly state its absence if crucial to the topic.\n\n8.  **Clarity and Conciseness:** Use clear, professional, and concise technical language suitable for other developers working on or learning about the project. Avoid unnecessary jargon, but use correct technical terms where appropriate.\n\n9.  **Conclusion/Summary:** End with a brief summary paragraph if appropriate for "Deployment Guide", reiterating the key aspects covered and their significance within the project.\n\nIMPORTANT: Generate the content in English language.\n\nRemember:\n- Ground every claim in the provided source files.\n- Prioritize accuracy and direct representation of the code\'s functionality and structure.\n- Structure the document logically for easy understanding by other developers.\n']}
2025-07-02 16:30:49,542 - INFO - api.websocket_wiki - websocket_wiki.py:211 - Retrieved 18 documents
2025-07-02 16:30:49,545 - INFO - api.rag - rag.py:73 - Dialog turns list exists but is empty
2025-07-02 16:30:49,546 - INFO - api.rag - rag.py:87 - Returning 0 dialog turns from memory
2025-07-02 16:30:49,547 - INFO - api.websocket_wiki - websocket_wiki.py:483 - Using Openai protocol with model: gpt-4o-mini
2025-07-02 16:30:49,562 - INFO - api.websocket_wiki - websocket_wiki.py:566 - Making Openai API call
2025-07-02 16:31:10,264 - INFO - api.websocket_wiki - websocket_wiki.py:79 - Request size: 1327 tokens
2025-07-02 16:31:10,277 - INFO - adalflow.core.prompt_builder - prompt_builder.py:74 - Prompt has variables: ['schema']
2025-07-02 16:31:10,278 - INFO - adalflow.core.prompt_builder - prompt_builder.py:74 - Prompt has variables: ['schema']
2025-07-02 16:31:10,278 - INFO - api.rag - rag.py:73 - Dialog turns list exists but is empty
2025-07-02 16:31:10,278 - INFO - api.rag - rag.py:87 - Returning 0 dialog turns from memory
2025-07-02 16:31:10,295 - INFO - adalflow.optim.grad_component - grad_component.py:79 - EvalFnToTextLoss: No backward engine provided. Creating one using model_client and model_kwargs.
2025-07-02 16:31:10,299 - INFO - adalflow.core.prompt_builder - prompt_builder.py:74 - Prompt has variables: ['contexts', 'system_prompt', 'conversation_history', 'output_format_str', 'input_str']
2025-07-02 16:31:10,299 - INFO - adalflow.core.generator - generator.py:180 - Generator Generator initialized.
2025-07-02 16:31:10,299 - INFO - api.data_pipeline - data_pipeline.py:705 - Preparing repo storage for https://github.com/niranjandasMM/LLM_agents/...
2025-07-02 16:31:10,299 - INFO - api.data_pipeline - data_pipeline.py:715 - Extracted repo name: niranjandasMM_LLM_agents
2025-07-02 16:31:10,299 - INFO - api.data_pipeline - data_pipeline.py:724 - Repository already exists at /Users/niranjanadas_m/.adalflow/repos/niranjandasMM_LLM_agents. Using existing repository.
2025-07-02 16:31:10,300 - INFO - api.data_pipeline - data_pipeline.py:738 - Repo paths: {'save_repo_dir': '/Users/niranjanadas_m/.adalflow/repos/niranjandasMM_LLM_agents', 'save_db_file': '/Users/niranjanadas_m/.adalflow/databases/niranjandasMM_LLM_agents.pkl'}
2025-07-02 16:31:10,300 - INFO - api.data_pipeline - data_pipeline.py:762 - Loading existing database...
2025-07-02 16:31:10,302 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict TextSplitter, {'type': 'TextSplitter', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'TextSplitter', '_init_args': {'split_by': 'word', 'chunk_size': 800, 'chunk_overlap': 200, 'batch_size': 1000, 'separators': {'page': '\x0c', 'passage': '\n\n', 'word': ' ', 'sentence': '.', 'token': ''}}, 'split_by': 'word', 'separators': {'page': '\x0c', 'passage': '\n\n', 'word': ' ', 'sentence': '.', 'token': ''}, 'chunk_size': 350, 'chunk_overlap': 100, 'batch_size': 1000}}
2025-07-02 16:31:10,302 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict ToEmbeddings, {'type': 'ToEmbeddings', 'data': {'_components': {'_ordered_dict': True, 'data': [('embedder', {'type': 'Embedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('model_client', {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'Embedder', '_init_args': {'model_client': None, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}}), ('batch_embedder', {'type': 'BatchEmbedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('embedder', {'type': 'Embedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('model_client', {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'Embedder', '_init_args': {'model_client': None, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'BatchEmbedder', '_init_args': {'embedder': None, 'batch_size': 500}, 'batch_size': 500}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'ToEmbeddings', '_init_args': {'embedder': None, 'batch_size': 500}, 'batch_size': 500}}
2025-07-02 16:31:10,304 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict Embedder, {'type': 'Embedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('model_client', {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'Embedder', '_init_args': {'model_client': None, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}}
2025-07-02 16:31:10,305 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict OpenAIClient, {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}}
2025-07-02 16:31:10,338 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict BatchEmbedder, {'type': 'BatchEmbedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('embedder', {'type': 'Embedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('model_client', {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'Embedder', '_init_args': {'model_client': None, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'BatchEmbedder', '_init_args': {'embedder': None, 'batch_size': 500}, 'batch_size': 500}}
2025-07-02 16:31:10,347 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict Embedder, {'type': 'Embedder', 'data': {'_components': {'_ordered_dict': True, 'data': [('model_client', {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}})]}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'Embedder', '_init_args': {'model_client': None, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}, 'model_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float'}, 'output_processors': None}}
2025-07-02 16:31:10,349 - INFO - adalflow.core.component - component.py:335 - Restoring class using from_dict OpenAIClient, {'type': 'OpenAIClient', 'data': {'_components': {'_ordered_dict': True, 'data': []}, '_parameters': {'_ordered_dict': True, 'data': []}, 'training': False, 'teacher_mode': False, 'tracing': False, 'name': 'OpenAIClient', '_init_args': {'api_key': None, 'chat_completion_parser': None, 'input_type': 'text', 'base_url': None, 'env_base_url_name': 'OPENAI_BASE_URL', 'env_api_key_name': 'OPENAI_API_KEY'}, '_api_key': None, '_env_api_key_name': 'OPENAI_API_KEY', '_env_base_url_name': 'OPENAI_BASE_URL', 'base_url': 'https://api.openai.com/v1', 'chat_completion_parser': <function get_first_message_content at 0x107bb4fe0>, '_input_type': 'text', '_api_kwargs': {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['import os \nimport yaml \nimport argparse\n\nfrom dotenv import load_dotenv\nfrom crewai import Agent, LLM, Task, Crew\nfrom crewai.tools import tool\nfrom langgraph.prebuilt import create_react_agent\nfrom jira_tools import (\n    get_jira_permissions,\n    get_jira_metadata,\n    jira_tool_list\n)\n\n# Add argument parser at the beginning\nparser = argparse.ArgumentParser(description=\'Run CrewAI with custom task description\')\nparser.add_argument(\'--task\', \'-t\', \n                   type=str, \n                   required=True,\n                   help=\'The task description for the agent\')\nparser.add_argument(\'--output\', \'-o\',\n                   type=str,\n                   default="A well-structured report containing information about the topic.",\n                   help=\'Expected output format (optional)\')\nargs = parser.parse_args()\n\n\n### Configure you LLM | TODO: Modify in CLI params\nload_dotenv()\ncrewai_llm = LLM(\n    model="openai/gpt-4o-mini",\n    temperature=0,\n    base_url="https://openrouter.ai/api/v1",\n    api_key=os.getenv(\'OPENROUTER_API_KEY\')\n)\n###\n\n@tool("JIRA Agent Tool")\ndef jira_agent_tool(user_query: str) -> str:\n    """AGENT which can help with Queries related to JIRA TICKETS. just takes user query not jql query, it will handle user query and outputs the result"""    \n    \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n      ', '   \n    jira_system_prompt = f""" \n        You are an expert in handling JIRA-related queries using the tools provided to you.  \n        \n        ```\n        Some Details about User and the Jira Instance connected: JIRA_INSTANCE_INFORMATION:\n        Jira Permissions: {get_jira_permissions()}\n        Jira Metadata: {get_jira_metadata()}\n        ```\n        \n        ### Key Guidelines:  \n        - **Answer Efficiently**: Provide direct answers without asking for additional details like project names—retrieve as much information as possible based on the given query.  \n        - **Use Tools Wisely**: Always rely on available tools and avoid making assumptions. If necessary, fetch data first and summarize it clearly.  \n        - **Ticket Summarization**: When referencing a specific ticket, always retrieve and summarize its comments along with other key details.  \n        - **Record Limitations**:  \n            - If the user does not specify a record limit, fetch and display only the first **10 records** by default.  \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket ', ' \n            - If more than **10 records** exist, first **show the total count** and then display only the first 10.  \n            - Only mention the total count if it exceeds 10.  \n        - **Ticket References**: Always include the direct **ticket URL** in responses.  \n            - The Jira instance URL is `{os.environ["JIRA_INSTANCE_URL"]}`, so ensure every referenced ticket has a valid link.  \n        - Know your limitations and things you can do from `JIRA_INSTANCE_INFORMATION` provided.\n        \n        **DO NOT fabricate responses—always rely on retrieved data.**  \n        """  \n                \n    agent_executor = create_react_agent(model=crewai_llm, \n                                        tools=jira_tool_list,\n                                        state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as ', '            state_modifier=jira_system_prompt,\n                                        )\n    \n    try:\n        response = agent_executor.invoke(input={"messages": [("human", user_query)]})\n        response = response[\'messages\'][-1].content\n        print(f"jira agent succussfuly generated")\n    except Exception as e:\n        return f"The JIRA tool got this error, fix and retry again please: {e}"\n    return response \n\njira_agent = Agent(\n    role=\'Jira Expert\', \n    goal=\'Help users retrieve and analyze Jira ticket information efficiently\', \n    backstory=\'You are an expert Jira analyst with deep knowledge of ticket management and reporting\',\n    verbose=True,\n    max_iter=2,\n    llm=crewai_llm,\n    tools=[jira_agent_tool],\n)\n\n\n# Create task with proper description\njira_task = Task(\n    description=args.task,\n    expected_output=args.output,  # Use the output format from arguments\n        # expected_output=\'In this task you should answer user query realted to jira\'\n        #             \'Use tools available to you to accomplish this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = ', 'this task\'\n        #             \'Once you have tried one tool and output seems ok, no need to retry anymore tools\'\n        #             \'do not makeup imaginary tools on your own\'\n        #             \'task output is a string\',\n    agent=jira_agent\n)\n\n\n# Create and run crew\ncrew = Crew(\n    agents=[jira_agent],\n    tasks=[jira_task],\n    verbose=True,\n)\n\ncrew_output = crew.kickoff() \n\nprint(f"Raw Output: {crew_output.raw}")\nprint(f"Tasks Output: {crew_output.tasks_output}")\nprint(f"Token Usage: {crew_output.token_usage}")\nprint(crew.usage_metrics)\n\n## Usage Example:\n# python run_crewai_jira_agent.py  -t "Get the latest created tickets from feb 1st" \n# -o "A list of the most recent Jira tickets with their details"\n', 'import os\nimport requests\n\nfrom dotenv import load_dotenv\nfrom atlassian import Jira\nfrom typing import Optional, List, Dict, Any\nfrom requests.auth import HTTPBasicAuth\n\nload_dotenv()\n\n# Jira credentials configuration\nBASE_URL = os.getenv(\'JIRA_BASE_URL\')\nUSERNAME = os.getenv(\'JIRA_USERNAME\')\nAPI_TOKEN = os.getenv(\'JIRA_API_TOKEN\')\nHEADERS = {"Content-Type": "application/json"}\n\n\nclass JiraTools:\n    def __init__(self):\n        # Initialize Jira client with environment variables\n        self.base_url = os.getenv(\'JIRA_URL\')\n        self.auth = (os.getenv(\'JIRA_USERNAME\'), os.getenv(\'JIRA_API_TOKEN\'))\n        self.headers = {"Content-Type": "application/json"}\n        self.jira = Jira(\n            url=self.base_url,\n            username=self.auth[0],\n            password=self.auth[1]\n        )\n        \n    def execute_jql_query(self, jql_query: str, fields: Optional[List[str]] = None, max_results: int = 10) -> List[Dict]:\n        """\n        Execute a JQL query and return the results\n        \n        Args:\n            jql_query (str): The JQL query to execute\n            fields (List[str], optional): List of fields to return in the response\n            max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n             ', ' max_results (int): Maximum number of results to return, if user do not ask anything specific limits, keep 10\n            \n        Returns:\n            List[Dict]: List of issues matching the query\n        """\n        try:\n            if fields is None:\n                fields = [\'summary\', \'status\', \'assignee\', \'priority\', \'created\', \'updated\']\n            \n            issues = self.jira.jql(\n                jql_query,\n                fields=fields,\n                limit=max_results\n            )\n            return issues\n        except Exception as e:\n            return {"error": f"Failed to execute JQL query: {str(e)}"}\n\n    def custom_api_request(self, method: str, endpoint: str, params: Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): ', 'Optional[Dict] = None, data: Optional[Dict] = None) -> Dict:\n        """\n        To make Jira API requests dynamically. Use this if other Tools are not being helpful. Use this tool Wisely.\n\n        Args:\n            method (str): HTTP method (GET, POST, PUT, DELETE).\n            endpoint (str): API endpoint ("/rest/api/2/search").\n            params (Dict, optional): Query parameters.\n            data (Dict, optional): JSON payload for POST/PUT requests.\n\n        Returns:\n            Dict: JSON response from Jira API.\n        """\n        url = f"{self.base_url}{endpoint}"\n        response = requests.request(method, url, auth=self.auth, headers=self.headers, params=params, json=data)\n\n        if response.status_code in [200, 201]:\n            return response.json()\n        else:\n            return {"error": f"Jira API error {response.status_code}: {response.text}"}\n   \n    def create_project(self, project_name: str, project_key: str, project_type: str = "software") -> Dict:\n        """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            ', '     """\n        Create a new Jira project.\n\n        Args:\n            project_name (str): Name of the new project.\n            project_key (str): Project key (must be unique).\n            project_type (str): Type of the project (default: "software").\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "key": project_key,\n            "name": project_name,\n            "projectTypeKey": project_type\n        }\n        return self.custom_api_request("POST", "/rest/api/2/project", data=data)\n\n\n    def create_ticket(self, project_key: str, summary: str, description: str, issue_type: str = "Task", priority: str = "Medium", assignee: Optional[str] = None) -> Dict:\n        """\n        Create a new Jira issue.\n\n        Args:\n            project_key (str): Project key where the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n      ', 'the issue will be created.\n            summary (str): Summary of the issue.\n            description (str): Detailed description of the issue.\n            issue_type (str): Type of issue (default: "Task").\n            priority (str): Priority of the issue (default: "Medium").\n            assignee (str, optional): Username of the assignee.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {\n            "fields": {\n                "project": {"key": project_key},\n                "summary": summary,\n                "description": description,\n                "issuetype": {"name": issue_type},\n                "priority": {"name": priority}\n            }\n        }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n ', '       }\n        if assignee:\n            data["fields"]["assignee"] = {"name": assignee}\n\n        return self.custom_api_request("POST", "/rest/api/2/issue", data=data)\n\n    def update_ticket_status(self, ticket_id: str, new_status: str) -> Dict:\n        """\n        Update the status of a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            new_status (str): The new status to transition the issue to.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        # Fetch available transitions\n        transitions = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/transitions")\n        available_transitions = transitions.get("transitions", [])\n\n        # Find the transition ID for the desired status\n        transition_id = next((t["id"] for t in available_transitions if t["name"].lower() == new_status.lower()), None)\n        if not transition_id:\n            return {"error": f"Status \'{new_status}\' is not a valid transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n   ', 'transition for this issue."}\n\n        # Perform the status update\n        data = {"transition": {"id": transition_id}}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/transitions", data=data)\n\n    def update_ticket_fields(self, ticket_id: str, fields: Dict[str, Any]) -> Dict:\n        """\n        Update specific fields of a Jira ticket.\n\n        Args:\n            ticket_id (str): The Jira issue ID.\n            fields (Dict): Dictionary of field names and new values.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"fields": fields}\n        return self.custom_api_request("PUT", f"/rest/api/2/issue/{ticket_id}", data=data)\n\n    def get_ticket_comments(self, ticket_id: str) -> List[Dict]:\n        """\n        Get comments for a given Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n\n        Returns:\n            List[Dict]: List of comments.\n        """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n        ', '       """\n        response = self.custom_api_request("GET", f"/rest/api/2/issue/{ticket_id}/comment")\n        return response.get("comments", []) if "error" not in response else response\n\n    def add_ticket_comment(self, ticket_id: str, comment: str) -> Dict:\n        """\n        Add a comment to a Jira ticket.\n\n        Args:\n            ticket_id (str): Jira issue ID.\n            comment (str): The comment text.\n\n        Returns:\n            Dict: Response from Jira API.\n        """\n        data = {"body": comment}\n        return self.custom_api_request("POST", f"/rest/api/2/issue/{ticket_id}/comment", data=data)\n\ndef get_jira_permissions():\n    """Fetch Jira user permissions in a simplified format."""\n    url = f"{BASE_URL}/rest/api/2/mypermissions"\n    \n    response = requests.get(url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        data = response.json().get("permissions", {})\n        filtered_perms = {\n            "Can Create Projects": data.get("CREATE_PROJECTS", {}).get("havePermission", False),\n            "Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch ', '"Can Create Issues": data.get("CREATE_ISSUES", {}).get("havePermission", False), \n            "Can Edit Issues": data.get("EDIT_ISSUES", {}).get("havePermission", False),\n            "Can Assign Issues": data.get("ASSIGN_ISSUES", {}).get("havePermission", False),\n            "Can Delete Issues": data.get("DELETE_ISSUES", {}).get("havePermission", False),\n            "Can Add Comments": data.get("ADD_COMMENTS", {}).get("havePermission", False),\n        }\n        return filtered_perms\n\n    return {"error": f"Failed to fetch permissions. Status: {response.status_code}"}\n\ndef get_jira_metadata():\n    """Fetch available project types, issue types, and custom fields in a concise format."""\n    metadata = {}\n\n    # Get Project Types\n    project_url = f"{BASE_URL}/rest/api/2/project"\n    response = requests.get(project_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        projects = response.json()\n        metadata["Project Types"] = list(set(project.get("projectTypeKey", "unknown") for project in projects))\n\n    # Get Issue Types\n    issue_url = f"{BASE_URL}/rest/api/2/issuetype"\n    response = requests.get(issue_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n    \n    if response.status_code == 200:\n        issue_types = response.json()\n        metadata["Issue Types"] = [issue["name"] for issue in issue_types]\n\n    # Get Custom Fields (Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n          ', '(Optional)\n    field_url = f"{BASE_URL}/rest/api/2/field"\n    response = requests.get(field_url, auth=HTTPBasicAuth(USERNAME, API_TOKEN), headers=HEADERS)\n\n    if response.status_code == 200:\n        fields = response.json()\n        metadata["Custom Fields"] = [field["name"] for field in fields if field["custom"]]\n\n    return metadata\n\n\njira_tool = JiraTools()\n\n## you can restrict some tools like creation and limit only read-only tools.\njira_tool_list = [ jira_tool.execute_jql_query, \n                  jira_tool.custom_api_request,\n                  jira_tool.create_ticket,\n                  jira_tool.update_ticket_status,\n                  jira_tool.update_ticket_fields,\n                  jira_tool.get_ticket_comments,\n                  jira_tool.add_ticket_comment,\n                #   jira_tool.create_project,\n                  ]\n\n\n### Example Usage to check the tools\n# if __name__ == "__main__":\n#     # Test the JiraTools class with a sample query\n#     jira_tools = JiraTools()\n    \n#     # Example: Get all open issues from a project\n#     sample_query = \'project = "MLPROJ" AND status = "Open" ORDER BY created DESC\'\n#     results = jira_tools.execute_jql_query(sample_query)\n    \n#     print("Sample JQL Query Results:")\n#     print(results)\n', '# CrewAI Jira Agent\n\nA powerful integration between CrewAI and Jira that enables AI-powered ticket management and analysis. This agent can help you query, analyze, and manage Jira tickets using natural language.\n\n## 🚀 Features\n\n- Natural language queries for Jira tickets\n- Automated ticket analysis and summarization\n- Custom output formatting\n- Built-in rate limiting and error handling\n- Support for multiple Jira project contexts\n- Deafult model is openai/gpt-4o-mini .\n\n## 📋 Prerequisites\n\n- Python 3.9+\n- Jira account with API access\n- OpenRouter API key for LLM access\n\n## 🛠️ Installation\n\n1. Clone this repository:\n\n2. Install required packages:\n```bash\npip install -r requirements.txt\n```\n\n3. Configure environment variables (see Configuration section below)\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following configuration:\n\n```env\n# Jira API Configuration\nJIRA_BASE_URL=https://your-domain.atlassian.net\nJIRA_USERNAME=your-email@example.com\nJIRA_API_TOKEN=your-api-token-here\n\n# LLM Configuration\nOPENROUTER_API_KEY="sk-your-api-key"\n```\n\n### Getting Your Credentials\n\n1. **Jira API Token**:\n   - Go to [Atlassian Account Settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n   - Create an API token and copy it\n   - Use your Atlassian account email as the username\n\n2. **OpenRouter API Key**:\n   - Sign up at [OpenRouter](https://openrouter.ai/)\n   - Generate an API key from your dashboard\n\n## 🎯 Usage\n\nThe agent can be run from the command line with various options:\n\n```bash\npython run_crewai_jira_agent.py -t "Your task description" -o "Expected output format"\n```\n\n### Command Line Arguments\n\n- `-t, --task`: The task description for the agent (required)\n- `-o, --output`: Expected output format (optional)\n\n### Example Commands\n\n1. Get recent tickets:\n```bash\npython run_crewai_jira_agent.py -t "Get the latest created tickets from feb 1st" -o "A list of the most recent Jira tickets with their details"\n```\n\n2. Analyze ticket status:\n```bash\npython run_crewai_jira_agent.py -t "Show all critical tickets in the current sprint" -o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify ', '-o "Summary of critical tickets with their status"\n```\n\n## 📌 Important Notes\n\n- Keep your API keys secure and never commit them to version control\n- The agent uses rate limiting to prevent API overuse\n- Default record limit is 10 unless specified otherwise\n- All ticket URLs are generated using your Jira instance URL\n\n## 🤝 Contributing\n<please add here how you want to manage contributions here, Mr Patrick>\n\n## 📝 License\n<Approiate license>\n\n## 🙏 Acknowledgments\n\n- Built with [CrewAI](https://github.com/joaomdmoura/crewAI)\n- Uses OpenRouter for LLM capabilities\n- Jira API integration\n\n## 🐛 Troubleshooting\n\nIf you encounter issues:\n\n1. Verify your credentials are correct\n2. Ensure all environment variables are set\n3. Check your Jira permissions\n4. Verify your network connection\n\n', 'requests\npython-dotenv\natlassian-python-api\n\nlangchain \nlanggraph \nlangchain_openai\nlangchain_community\n\ncrewai\n\n']}}}
2025-07-02 16:31:10,367 - INFO - api.data_pipeline - data_pipeline.py:767 - Loaded 18 documents from existing database
2025-07-02 16:31:10,367 - INFO - api.rag - rag.py:421 - Loaded 18 documents for retrieval
2025-07-02 16:31:10,367 - INFO - api.rag - rag.py:350 - Target embedding size: 256 (found in 18 documents)
2025-07-02 16:31:10,367 - INFO - api.rag - rag.py:384 - Embedding validation complete: 18/18 documents have valid embeddings
2025-07-02 16:31:10,367 - INFO - api.rag - rag.py:429 - Using 18 documents with valid embeddings for retrieval
2025-07-02 16:31:10,367 - INFO - adalflow.optim.grad_component - grad_component.py:79 - EvalFnToTextLoss: No backward engine provided. Creating one using model_client and model_kwargs.
2025-07-02 16:31:10,367 - INFO - adalflow.components.retriever.faiss_retriever - faiss_retriever.py:190 - Index built with 18 chunks
2025-07-02 16:31:10,367 - INFO - api.rag - rag.py:440 - FAISS retriever created successfully
2025-07-02 16:31:10,367 - INFO - api.websocket_wiki - websocket_wiki.py:108 - Retriever prepared for https://github.com/niranjandasMM/LLM_agents/
2025-07-02 16:31:10,368 - INFO - api.openai_client - openai_client.py:416 - api_kwargs: {'model': 'text-embedding-3-small', 'dimensions': 256, 'encoding_format': 'float', 'input': ['You are an expert technical writer and software architect.\nYour task is to generate a comprehensive and accurate technical wiki page in Markdown format about a specific feature, system, or module within a given software project.\n\nYou will be given:\n1. The "[WIKI_PAGE_TOPIC]" for the page you need to create.\n2. A list of "[RELEVANT_SOURCE_FILES]" from the project that you MUST use as the sole basis for the content. You have access to the full content of these files. You MUST use AT LEAST 5 relevant source files for comprehensive coverage - if fewer are provided, search for additional related files in the codebase.\n\nCRITICAL STARTING INSTRUCTION:\nThe very first thing on the page MUST be a `<details>` block listing ALL the `[RELEVANT_SOURCE_FILES]` you used to generate the content. There MUST be AT LEAST 5 source files listed - if fewer were provided, you MUST find additional related files to include.\nFormat it exactly like this:\n<details>\n<summary>Relevant source files</summary>\n\nRemember, do not provide any acknowledgements, disclaimers, apologies, or any other preface before the `<details>` block. JUST START with the `<details>` block.\nThe following files were used as context for generating this wiki page:\n\n- [readme.md](readme.md)\n<!-- Add additional relevant files if fewer than 5 were provided -->\n</details>\n\nImmediately after the `<details>` block, the main title of the page should be a H1 Markdown heading: `# Customization Options`.\n\nBased ONLY on the content of the `[RELEVANT_SOURCE_FILES]`:\n\n1.  **Introduction:** Start with a concise introduction (1-2 paragraphs) explaining the purpose, scope, and high-level overview of "Customization Options" within the context of the overall project. If relevant, and if information is available in the provided files, link to other potential wiki pages using the format `[Link Text](#page-anchor-or-id)`.\n\n2.  **Detailed Sections:** Break down "Customization Options" into logical sections using H2 (`##`) and H3 (`###`) Markdown headings. For each section:\n    *   Explain the architecture, components, data flow, or logic relevant to the section\'s focus, as evidenced in the source files.\n    *   Identify key functions, classes, data structures, API endpoints, or configuration elements pertinent to that section.\n\n3.  **Mermaid Diagrams:**\n    *   EXTENSIVELY use Mermaid diagrams (e.g., `flowchart TD`, `sequenceDiagram`, `classDiagram`, `erDiagram`, `graph TD`) to visually represent architectures, flows, relationships, and schemas found in the source files.\n    *   Ensure diagrams are accurate and directly derived from information in the `[RELEVANT_SOURCE_FILES]`.\n    *   Provide a brief explanation before or after each diagram to give context.\n    *   CRITICAL: All diagrams MUST follow strict vertical orientation:\n       - Use "graph TD" (top-down) directive for flow diagrams\n       - NEVER use "graph LR" (left-right)\n       - Maximum node width should be 3-4 words\n       - For sequence diagrams:\n         - Start with "sequenceDiagram" directive on its own line\n         - Define ALL participants at the beginning\n         - Use descriptive but concise participant names\n         - Use the correct arrow types:\n           - ->> for request/asynchronous messages\n           - -->> for response messages\n           - -x for failed messages\n         - Include activation boxes using +/- notation\n         - Add notes for clarification using "Note over" or "Note right of"\n\n4.  **Tables:**\n    *   Use Markdown tables to summarize information such as:\n        *   Key features or components and their descriptions.\n        *   API endpoint parameters, types, and descriptions.\n        *   Configuration options, their types, and default values.\n        *   Data model fields, types, constraints, and descriptions.\n\n5.  **Code Snippets:**\n    *   Include short, relevant code snippets (e.g., Python, Java, JavaScript, SQL, JSON, YAML) directly from the `[RELEVANT_SOURCE_FILES]` to illustrate key implementation details, data structures, or configurations.\n    *   Ensure snippets are well-formatted within Markdown code blocks with appropriate language identifiers.\n\n6.  **Source Citations (EXTREMELY IMPORTANT):**\n    *   For EVERY piece of significant information, explanation, diagram, table entry, or code snippet, you MUST cite the specific source file(s) and relevant line numbers from which the information was derived.\n    *   Place citations at the end of the paragraph, under the diagram/table, or after the code snippet.\n    *   Use the exact format: `Sources: [filename.ext:start_line-end_line]()` for a range, or `Sources: [filename.ext:line_number]()` for a single line. Multiple files can be cited: `Sources: [file1.ext:1-10](), [file2.ext:5](), [dir/file3.ext]()` (if the whole file is relevant and line numbers are not applicable or too broad).\n    *   If an entire section is overwhelmingly based on one or two files, you can cite them under the section heading in addition to more specific citations within the section.\n    *   IMPORTANT: You MUST cite AT LEAST 5 different source files throughout the wiki page to ensure comprehensive coverage.\n\n7.  **Technical Accuracy:** All information must be derived SOLELY from the `[RELEVANT_SOURCE_FILES]`. Do not infer, invent, or use external knowledge about similar systems or common practices unless it\'s directly supported by the provided code. If information is not present in the provided files, do not include it or explicitly state its absence if crucial to the topic.\n\n8.  **Clarity and Conciseness:** Use clear, professional, and concise technical language suitable for other developers working on or learning about the project. Avoid unnecessary jargon, but use correct technical terms where appropriate.\n\n9.  **Conclusion/Summary:** End with a brief summary paragraph if appropriate for "Customization Options", reiterating the key aspects covered and their significance within the project.\n\nIMPORTANT: Generate the content in English language.\n\nRemember:\n- Ground every claim in the provided source files.\n- Prioritize accuracy and direct representation of the code\'s functionality and structure.\n- Structure the document logically for easy understanding by other developers.\n']}
2025-07-02 16:31:11,442 - INFO - api.websocket_wiki - websocket_wiki.py:211 - Retrieved 18 documents
2025-07-02 16:31:11,442 - INFO - api.rag - rag.py:73 - Dialog turns list exists but is empty
2025-07-02 16:31:11,443 - INFO - api.rag - rag.py:87 - Returning 0 dialog turns from memory
2025-07-02 16:31:11,443 - INFO - api.websocket_wiki - websocket_wiki.py:483 - Using Openai protocol with model: gpt-4o-mini
2025-07-02 16:31:11,454 - INFO - api.websocket_wiki - websocket_wiki.py:566 - Making Openai API call
2025-07-02 16:31:32,419 - INFO - api.api - api.py:485 - Attempting to save wiki cache for niranjandasMM/LLM_agents (github), lang: en
2025-07-02 16:31:32,419 - INFO - api.api - api.py:417 - Attempting to save wiki cache. Path: /Users/niranjanadas_m/.adalflow/wikicache/deepwiki_cache_github_niranjandasMM_LLM_agents_en.json
2025-07-02 16:31:32,419 - INFO - api.api - api.py:430 - Payload prepared for caching. Size: 45878 bytes.
2025-07-02 16:31:32,420 - INFO - api.api - api.py:435 - Writing cache file to: /Users/niranjanadas_m/.adalflow/wikicache/deepwiki_cache_github_niranjandasMM_LLM_agents_en.json
2025-07-02 16:31:32,421 - INFO - api.api - api.py:438 - Wiki cache successfully saved to /Users/niranjanadas_m/.adalflow/wikicache/deepwiki_cache_github_niranjandasMM_LLM_agents_en.json
